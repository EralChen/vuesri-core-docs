import{s as u}from"./chunk-YzRi88Dj.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */function V(a,e){let t=e.responseType;t?t!=="array-buffer"&&t!=="blob"&&t!=="json"&&t!=="native"&&t!=="native-request-init"&&t!=="text"&&(t="text"):t="json",e.responseType=t;const l=e.signal;return delete e.signal,globalThis.invokeStaticMessage("request",{url:a,options:e},{signal:l}).then(async r=>{let p,i,m,n,o;if(r.data)if(r.data instanceof ArrayBuffer){if(!(t!=="json"&&t!=="text"&&t!=="blob"||(p=new Blob([r.data]),t!=="json"&&t!=="text"||(n=await p.text(),t!=="json")))){try{i=JSON.parse(n||null)}catch(s){const c={...s,url:a,requestOptions:e};throw new u("request:server",s.message,c)}if(i.error){const s={...i.error,url:a,requestOptions:e};throw new u("request:server",i.error.message,s)}}}else t==="native"&&(r.data.signal=l,m=await fetch(r.data.url,r.data),r.httpStatus=m.status);switch(t){case"blob":o=p;break;case"json":o=i;break;case"native":o=m;break;case"text":o=n;break;default:o=r.data}return{data:o,httpStatus:r.httpStatus,requestOptions:e,ssl:r.ssl,url:a}})}export{V as execute};
