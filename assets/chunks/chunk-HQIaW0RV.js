import{u as p}from"./chunk-Hg0ijuo1.js";import{gS as v,gX as g,gY as y,lu as V,gW as u,hb as _}from"./chunk-Id6bT2Sz.js";function H(){const a=v("vaParentView");if(!a)throw new Error("No parent view provided");return a}class f extends g{constructor(t,i){super(),this.originView=t,this.targetView=i}add(){this.handler||(this.handler=this.originView.watch("viewpoint",t=>{this.targetView.viewpoint=t}),this.removeHandler=()=>{this.handler?.remove(),this.handler=null})}}const x=y({__name:"index",props:{syncKey:{type:String,default:"__va_derived_view_sync_init__"},synchronization:{type:String,default:"one-way"}},setup(a){const t=a,i=t.syncKey,e=H();e[i]||(e[i]=new Map);const r=p(),c=new f(e,r),o=new f(r,e),l=V(()=>t.synchronization==="two-way");w();function w(){if(o.remove(),c.handler||(c.add(),!l.value))return;const n=r.watch("interacting, animation",s=>{s&&(c.remove(),e[i].forEach((d,h)=>{h!==r&&d()}),n.remove())})}e[i].set(r,()=>w());const m=e.watch("interacting, animation",n=>{n&&w()});if(u(()=>{m.remove()}),l.value){const n=r.watch("interacting, animation",s=>{if(!s||o.handler)return;o.add();const d=e.watch("interacting, animation",h=>{h&&(o.remove(),d.remove())})});u(()=>{n.remove()})}return(n,s)=>_(n.$slots,"default")}});export{x as _};
