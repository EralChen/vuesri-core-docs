import{e3 as p,b$ as h,fi as d,V as u,A as n,a1 as o,a2 as l,a4 as f,bZ as c}from"./chunk-YzRi88Dj.js";import{n as g}from"./chunk-vB7g5hVZ.js";import{c as y}from"./chunk-CTbdt3eQ.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */let r=class extends p(y(g(c))){constructor(){super(...arguments),this.type="wmts-3d"}initialize(){this._getCompatibleTileInfoMatrixSet(t=>this._getTileInfoSupportError(t.tileInfo,t.fullExtent));const e=h(()=>this.view?.basemapTerrain?.tilingSchemeLocked).then(()=>{const t=this._getCompatibleTileInfoMatrixSet(i=>this._getTileInfoError(i.tileInfo,i.fullExtent));t!=null&&(t.id!==null&&this.layer.activeLayer.tileMatrixSetId!==t.id&&(this.layer.activeLayer.tileMatrixSetId=t.id),t.tileInfo&&(this.tileInfo=t.tileInfo),this.layer.fullExtent=t.fullExtent)});this.addResolvingPromise(e),this.when(()=>this._postInitialize())}get hasMixedImageFormats(){return!0}refresh(){this.emit("data-changed")}canResume(){if(!super.canResume())return!1;const e=this.layer.activeLayer.tileMatrixSet;return e!=null&&!this._getTileInfoError(e.tileInfo,e.fullExtent)}async doRefresh(){this.suspended||this.emit("data-changed")}_postInitialize(){this._updatingHandles.add(()=>this.layer?.activeLayer?.styleId,()=>this.refresh()),this._updatingHandles.add(()=>this.layer?.activeLayer,e=>{const t=this._getCompatibleTileInfoMatrixSet(i=>this._getTileInfoError(i.tileInfo,i.fullExtent),!0);t&&t.id!=null&&e.tileMatrixSetId!==t.id&&(this.layer.activeLayer.tileMatrixSetId=t.id),this.notifyChange("suspended"),this.canResume()&&this.refresh()})}_getCompatibleTileInfoMatrixSet(e,t=!1){const i=d(this.layer);if(i!=null){if(u.isCollection(i))return i.find(m=>{const s=e(m);return s!=null&&(t?n.getLogger(this).error("The selected tile matrix set is not compatible with the view",s):this.addResolvingPromise(Promise.reject(s))),s==null});const a=e(i);return a!=null&&(t?n.getLogger(this).error("The selected tile matrix set is not compatible with the view",a):this.addResolvingPromise(Promise.reject(a))),i}return null}_getTileInfoError(e,t){return this._getTileInfoSupportError(e,t)||this._getTileInfoCompatibilityError(e,this.view.basemapTerrain.tilingScheme)}};o([l({readOnly:!0})],r.prototype,"hasMixedImageFormats",null),o([l()],r.prototype,"layer",void 0),o([l()],r.prototype,"suspended",void 0),o([l()],r.prototype,"tileInfo",void 0),r=o([f("esri.views.3d.layers.WMTSLayerView3d")],r);const et=r;export{et as default};
