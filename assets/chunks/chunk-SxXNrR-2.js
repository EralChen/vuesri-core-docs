import{$ as s,a0 as n,a1 as o,a2 as p,a3 as d,a4 as g}from"./chunk-CMhy9c9G.js";import{d as l}from"./chunk-DqA02ZWp.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */let r=class extends l{get updating(){return this._watchUpdatingTracking?.updating??!1}constructor(t){super(t),this._watchUpdatingTracking=new s}initialize(){const{featureTiles:t}=this.view;this.addHandles(t.addClient()),this._watchUpdatingTracking.addOnCollectionChange(()=>t?.tiles,()=>this.update(),n)}destroy(){this._watchUpdatingTracking.destroy()}getTiles(){const t=i=>{const[e,a,m]=i.lij;return d.fromExtent(this.view.featureTiles.tilingScheme.getExtentGeometry(e,a,m))};return this.view.featureTiles.tiles.toArray().sort((i,e)=>i.loadPriority-e.loadPriority).map(i=>({...i,geometry:t(i)}))}};o([p()],r.prototype,"_watchUpdatingTracking",void 0),o([p()],r.prototype,"updating",null),o([p()],r.prototype,"view",void 0),r=o([g("esri.views.3d.layers.support.FeatureTileTree3DDebugger")],r);export{r as FeatureTileTree3DDebugger};
