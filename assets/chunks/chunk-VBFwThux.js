import{an as m,s as l,ew as c,ar as u,cV as h,a1 as n,a2 as a,a4 as d}from"./chunk-CMhy9c9G.js";import{n as y,r as g}from"./chunk-BfI1O8Nf.js";import{r as f}from"./chunk-BuQtqsRu.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-DjDIt6nn.js";import"./chunk-CjSui6k2.js";import"./chunk-iAha9nPY.js";import"./chunk-C4Yx2DVu.js";import"./chunk-CLknGTw1.js";import"./chunk-CD9yU3wS.js";import"./chunk-DNnuvc1i.js";import"./chunk-CUzevAry.js";import"./chunk-DfBjMReh.js";import"./chunk-F8oTIn7N.js";import"./chunk-CujHzHWW.js";import"./chunk-Caulfaw_.js";import"./chunk-DJ3DTnMt.js";import"./chunk-Czi-fdpx.js";import"./chunk-BxRfZC3M.js";let s=class extends f(g){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new l("stream-controller",this.pipelineErrorString):null}on(e,i){if(Array.isArray(e))return c(e.map(t=>this.on(t,i)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(t=>t.streamMessenger.enableEvent(e,!0));const p=super.on(e,i),o=this;return u(()=>{p.remove(),r&&(o._workerProxy.closed||o.hasEventListener(e)||o.getWorker().then(t=>t.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,i){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new l("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return y(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),i).then(p=>{const o=h.fromJSON(p);return o.features.forEach(t=>{t.layer=this.layer,t.sourceLayer=this.layer}),o}),new h({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),i=this;return{...e,get container(){return i.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};n([a()],s.prototype,"pipelineConnectionStatus",void 0),n([a()],s.prototype,"pipelineErrorString",void 0),n([a({readOnly:!0})],s.prototype,"connectionError",null),n([a({readOnly:!0})],s.prototype,"_streamConnectionStatus",null),s=n([d("esri.views.2d.layers.StreamLayerView2D")],s);const ye=s;export{ye as default};
