import{a1 as n,a5 as g,aj as m,$ as f,ak as b,al as C,am as w,an as u,ao as v,ag as c,ap as V,aq as E,ar as d,as as x,E as _,at as O,a2 as a,a4 as S,au as G,av as P}from"./chunk-CMhy9c9G.js";import{i as A,l as $}from"./chunk-DXKJyjzq.js";import{z as H,u as I}from"./chunk-D-rMG-KE.js";import{p as z,a as R,u as j}from"./chunk-TKmf17Pr.js";import{n as D}from"./chunk-BiAAMMdb.js";let r=class extends g{constructor(i){super(i),this.type="graphics-3d",this.graphicsCore=null,this.drapeSourceType=m.Features,this.scaleVisibilityEnabled=!1,this.frustumVisibilityEnabled=!1,this._suspendResumeExtent=null,this._updatingHandles=new f}initialize(){const{layer:i}=this,e="effectiveScaleRange"in i?i:null,l=this.scaleVisibilityEnabled&&e!=null,t=new H({owner:this,layer:this.owner.layer,preferredUpdatePolicy:b.SYNC,graphicSymbolSupported:!0,componentFactories:{elevationAlignment:(s,o)=>new z({graphicsCoreOwner:this,graphicsCore:s,queryGraphicUIDsInExtent:o,elevationProvider:this.view.elevationProvider}),scaleVisibility:l?(s,o)=>new I({graphicsCoreOwner:this,layer:e,queryGraphicUIDsInExtent:o,graphicsCore:s,basemapTerrain:this.owner.view.basemapTerrain}):null,objectStates:s=>new R(s)}});if(this._set("graphicsCore",t),this.frustumVisibilityEnabled&&this._set("frustumVisibility",new j({graphicsCoreOwner:this})),"fullOpacity"in this.owner){const s=this.owner;this._updatingHandles.add(()=>s.fullOpacity,()=>this.graphicsCore.opacityChange())}if("elevationInfo"in i){const s=i;this._updatingHandles.add(()=>s.elevationInfo,(o,p)=>{C(o,p)&&this._updatingHandles.addPromise(this.graphicsCore.elevationInfoChange())})}this._set("initializePromise",this._initializeAsync()),this._updatingHandles.addPromise(this.initializePromise)}async _initializeAsync(){try{await this.graphicsCore.initializePromise}catch(i){if(w(i))return;throw i}this.destroyed||(this.addHandles(u(()=>this.view.clippingArea,()=>this._updateClippingExtent(),v)),this._updateClippingExtent(),this._setupSuspendResumeExtent(),this.graphicsCore.startCreateGraphics())}destroy(){this._updatingHandles.destroy(),this._set("frustumVisibility",c(this.frustumVisibility)),this._set("graphicsCore",c(this.graphicsCore))}get layer(){return this.owner.layer}get view(){return this.owner.view}get scaleVisibility(){return this.graphicsCore?.scaleVisibility}get elevationAlignment(){return this.graphicsCore?.elevationAlignment}get scaleVisibilitySuspended(){return!(this.scaleVisibility==null||!this.scaleVisibility.suspended)}get frustumVisibilitySuspended(){return this.frustumVisibility!=null&&this.frustumVisibility.suspended}get suspended(){return this.owner.suspended??!1}get updating(){return!!(this.graphicsCore?.updating||this.scaleVisibility!=null&&this.scaleVisibility.updating||this.frustumVisibility!=null&&this.frustumVisibility.updating||this._updatingHandles.updating)}get graphics3DGraphics(){return this.graphicsCore?.graphics3DGraphics}get graphics3DGraphicsByObjectID(){return this.graphicsCore?.graphics3DGraphicsByObjectID}get loadedGraphics(){return this.owner.loadedGraphics}get fullOpacity(){return this.owner.fullOpacity??1}get slicePlaneEnabled(){return this.owner.slicePlaneEnabled}get updatePolicy(){return this.owner.updatePolicy}notifyGraphicGeometryChanged(i){this.graphicsCore.notifyGraphicGeometryChanged(i)}notifyGraphicVisibilityChanged(i){this.graphicsCore.notifyGraphicVisibilityChanged(i)}getRenderingInfo(i,e,l){const t=A(i,{renderer:e,arcade:l});if(t?.color){const s=t.color;s[0]=s[0]/255,s[1]=s[1]/255,s[2]=s[2]/255}return t}getRenderingInfoAsync(i,e,l,t){return $(i,{renderer:e,arcade:l,...t})}getHit(i){if(this.owner.loadedGraphics){const e=this.owner.loadedGraphics.find(l=>l.uid===i);if(e){const l=this.layer instanceof V?this.layer:null,t=E(e,l);return{type:"graphic",graphic:t,layer:t.layer}}}return null}whenGraphicBounds(i,e){return this.graphicsCore?this.graphicsCore.whenGraphicBounds(i,e):Promise.reject()}computeAttachmentOrigin(i,e){return this.graphicsCore?this.graphicsCore.computeAttachmentOrigin(i,e):null}getSymbolLayerSize(i,e){return this.graphicsCore?this.graphicsCore.getSymbolLayerSize(i,e):null}maskOccludee(i){const e=this.graphicsCore?.objectStates;if(!e)return d();const{set:l,handle:t}=e.acquireOccludeeSet(null);return e.setUid(l,i.uid),t}highlight(i,e){const l=this.graphicsCore?.objectStates;if(!l||i instanceof x)return h;const t=D(i);if(t.length===0)return h;if(t[0]instanceof _){const s=t.map(y=>y.uid),{set:o,handle:p}=l.acquireHighlightSet(e,null);return l.setUids(o,s),p}if(typeof t[0]=="number"){const s=t,{set:o,handle:p}=l.acquireHighlightSet(e,null);return l.setObjectIds(o,s),p}return h}_setupSuspendResumeExtent(){const{scaleVisibility:i,frustumVisibility:e}=this;if(i==null&&e==null)return;const l=({computedExtent:t,extentPadding:s})=>{this._suspendResumeExtent=G(t,this._suspendResumeExtent,P,s),i?.setExtent(this._suspendResumeExtent),e?.setExtent(this._suspendResumeExtent)};this.addHandles(u(()=>({computedExtent:this.graphicsCore?.computedExtent,extentPadding:this.graphicsCore?.extentPadding}),t=>l(t),O))}_updateClippingExtent(){const i=this.view.clippingArea;this.graphicsCore.setClippingExtent(i,this.view.spatialReference)&&this.graphicsCore.recreateAllGraphics()}};n([a()],r.prototype,"type",void 0),n([a({constructOnly:!0})],r.prototype,"owner",void 0),n([a()],r.prototype,"layer",null),n([a()],r.prototype,"view",null),n([a({constructOnly:!0})],r.prototype,"graphicsCore",void 0),n([a()],r.prototype,"scaleVisibility",null),n([a({constructOnly:!0})],r.prototype,"frustumVisibility",void 0),n([a()],r.prototype,"elevationAlignment",null),n([a()],r.prototype,"scaleVisibilitySuspended",null),n([a({readOnly:!0})],r.prototype,"frustumVisibilitySuspended",null),n([a()],r.prototype,"suspended",null),n([a({readOnly:!0})],r.prototype,"updating",null),n([a()],r.prototype,"loadedGraphics",null),n([a()],r.prototype,"fullOpacity",null),n([a()],r.prototype,"slicePlaneEnabled",null),n([a()],r.prototype,"drapeSourceType",void 0),n([a()],r.prototype,"updatePolicy",null),n([a({constructOnly:!0})],r.prototype,"scaleVisibilityEnabled",void 0),n([a({constructOnly:!0})],r.prototype,"frustumVisibilityEnabled",void 0),n([a()],r.prototype,"initializePromise",void 0),r=n([S("esri.views.3d.layers.graphics.GraphicsProcessor")],r);const h=d();export{r as x};
