import{a1 as s,a2 as d,a4 as f,z as o,n6 as g,eA as x,n7 as m,n8 as y}from"./chunk-CMhy9c9G.js";import{Z as D}from"./chunk-DcUppS74.js";import{t as F}from"./chunk-D1fDIYeK.js";import{i as w}from"./chunk-DjDIt6nn.js";const I="updating";function v(n){return n==="updating"?null:n}function N(n){return n==="updating"}const O=n=>{let r=class extends n{constructor(){super(...arguments),this._definitionExpressionErrors=0,this._maxDefinitionExpressionErrors=20,this.logError=e=>{this._definitionExpressionErrors<this._maxDefinitionExpressionErrors&&o.getLogger(this).error("Error while evaluating definitionExpression: "+e),this._definitionExpressionErrors++,this._definitionExpressionErrors===this._maxDefinitionExpressionErrors&&o.getLogger(this).error("Further errors are ignored")}}get parsedDefinitionExpression(){if(!this.i3slayer?.definitionExpression)return null;try{const e=D.create(this.i3slayer.definitionExpression,{fieldsIndex:this.i3slayer.fieldsIndex});if(!e.isStandardized)return o.getLogger(this).error("definitionExpression is using non standard function"),null;const t=[],i=e.fieldNames;return g(i,this.i3slayer.fields,{missingFields:t}),t.length>0?(o.getLogger(this).error(`definitionExpression references unknown fields: ${t.join(", ")}`),null):(this._definitionExpressionErrors=0,e)}catch(e){return o.getLogger(this).error("Failed to parse definitionExpression: "+e),null}}get definitionExpressionFields(){return this.parsedDefinitionExpression?this.parsedDefinitionExpression.fieldNames:[]}_evaluateClause(e,t){try{return e.testFeature(t)}catch(i){return this.logError(i),!1}}_addDefinitionExpressionToQuery(e){if(!this.parsedDefinitionExpression)return e;const t=this.i3slayer.definitionExpression,i=e.clone();return i.where?i.where=`(${t}) AND (${i.where})`:i.where=t,i}};return s([d({readOnly:!0})],r.prototype,"parsedDefinitionExpression",null),s([d({readOnly:!0})],r.prototype,"definitionExpressionFields",null),r=s([f("esri.views.3d.layers.support.DefinitionExpressionSceneLayerView")],r),r},S=n=>{let r=class extends n{get timeExtent(){return w(this.i3slayer,this.view?.timeExtent,this._get("timeExtent"))}get mergedFilter(){const{filter:e,timeExtent:t}=this;if(t==null)return e;const i=e?.clone()??new x;return t!=null&&(i.timeExtent=i.timeExtent?.intersection(t)??t),i}getTimeFilterDependencies(){const{timeInfo:e}=this.i3slayer;if(e==null)return[];const{startField:t,endField:i}=e;return[t,i]}addTimeFilter(e,t){if(t==null)return;const{timeInfo:i}=this.i3slayer;if(i==null)return;const{startField:l,endField:a,useTime:u}=i;if(!u||l==null&&a==null)return;const p=i.toJSON(),h=t.toJSON();e.push((E,c)=>_(E,c,p,h))}};return s([d({readOnly:!0})],r.prototype,"timeExtent",null),s([d()],r.prototype,"mergedFilter",null),r=s([f("esri.views.3d.layers.support.TemporalSceneLayerView")],r),r};function _(n,r,e,t){const i=r.attributeInfo?.attributeData;if(i==null)return;const{startTimeField:l,endTimeField:a}=e;if(l!=null&&i[l]==null||a!=null&&i[a]==null)return;const u=F(e,t,new b(i));if(u==null)return;const{featureIds:p}=r;m(n,p,u)}class b{constructor(r){this.attributeData=r}getAttribute(r,e){return y(this.attributeData[e],r)}getAttributeAsTimestamp(r,e){const t=this.getAttribute(r,e);return typeof t=="string"?new Date(t).getTime():typeof t=="number"||t==null?t:null}}export{v as a,N as b,I as n,O as t,S as u};
