import{kW as j,kX as X,aZ as Y,bD as I,a0 as b,kY as B,kj as J,fm as K,fn as N,fo as Z,dp as g,k$ as Q,a3 as ee,l0 as V,aL as z,a7 as te,g5 as ie,bF as re,dq as se,E as v,a6 as oe,aY as q,aX as R,ag as W,an as M,a1 as x,a2 as $,a4 as ae}from"./chunk-CMhy9c9G.js";import{l as F}from"./chunk-BgyGFZqd.js";import{u as ne}from"./chunk-hjCbvou8.js";import{t as le}from"./chunk-CE4P1rD6.js";import{F as he}from"./chunk-BOG1QSRE.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-CLknGTw1.js";import"./chunk-CD9yU3wS.js";import"./chunk-DNnuvc1i.js";import"./chunk-CUzevAry.js";import"./chunk-iAha9nPY.js";import"./chunk-DfBjMReh.js";import"./chunk-F8oTIn7N.js";import"./chunk-N_vz0V2G.js";import"./chunk-CjSui6k2.js";import"./chunk-C4Yx2DVu.js";import"./chunk-DvGL8dtf.js";import"./chunk-YA9YD_OS.js";import"./chunk-CvgiXnaQ.js";import"./chunk-D1fDIYeK.js";import"./chunk-AgXG-2tE.js";const C=2;class me extends j{constructor(e){super(),this.element=e,this._handles=new X,this.isWrapAround=!1,this.perspectiveTransform=Y(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(I(()=>this.element,()=>{const t=this.element;this.ready(),t&&this._handles.add(B(t,"play",()=>this.requestRender()))},b))}getMesh(e){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=J(this.texture)}get textureSize(){if(!this.texture)return[1,1];const e=this.texture.descriptor;return[e.width,e.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(e){const t=this.element;if(t==null)return;const{context:s}=e,{videoWidth:n,videoHeight:r}=t;if(n!==0&&r!==0){if(this.texture)t.paused||this.texture.setData(t);else{const i=new K;i.wrapMode=N.CLAMP_TO_EDGE,i.preMultiplyAlpha=!0,i.width=n,i.height=r,this.texture=new Z(s,i,t)}t.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(e)}}_createTransforms(){return null}updateDrawCoords(e,t,s,n){const r=this.element,i=this._getFrameInfo();if(!r||!i)return;this._initializeData(e,i,s);const{controlPoints:l,horizon:m}=i,h=Math.sqrt(l.length),p=h,{x:o,y}=e,u=this._vertices,T=l[0],P=l[h-1],U=l[(p-1)*h],k=l[(p-1)*h+h-1],G=g(m?m[0].mapPoint:T.mapPoint,s),O=g(m?m[1].mapPoint:P.mapPoint,s),f=g(U.mapPoint,s),D=g(k.mapPoint,s);this.clipGeometry=m?new Q({geometry:ee.fromJSON({rings:[[[f.x,f.y],[D.x,D.y],[O.x,O.y],[G.x,G.y],[f.x,f.y]]],spatialReference:s})}):null;for(let c=0;c<l.length;c++){const E=l[c],{sourcePoint:S,mapPoint:A}=E;if(S==null||A==null)continue;const w=g(A,s);u[c*C+0]=w.x-o,u[c*C+1]=w.y-y}let L=t;if(n){const c=Math.min(G.x,O.x,f.x,D.x),E=Math.max(G.x,O.x,f.x,D.x),{worldWidth:S,xBounds:A}=n,[w,H]=A;c<w&&E>w?L=S:E>H&&c<H&&(L=-S)}this.wrapAroundShift=L,this.isWrapAround=L!==0}draw(e,t){this.isReady&&this._vertices&&this._indices&&this._texCoords?t.render(e,{transform:{dvs:this.dvsMat3},config:{perspective:this.perspectiveTransform,texSize:this.textureSize,wrapAroundShift:this.wrapAroundShift,isWrapAround:this.isWrapAround,opacity:this.opacity,texture:{texture:this.texture,unit:0}},position:this._vertices,tex:this._texCoords,index:this._indices}):this.requestRender()}_initializeData(e,t,s){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:n}=t,r=Math.sqrt(n.length),i=r,l=new Float32Array(C*n.length),m=new Uint16Array(2*n.length);for(let o=0;o<n.length;o++){const y=n[o],{sourcePoint:u,mapPoint:T}=y;if(u==null||T==null)continue;const P=g(T,s);l[o*C+0]=P.x-e.x,l[o*C+1]=P.y-e.y,m[2*o+0]=u.x,m[2*o+1]=u.y}const h=new Uint16Array(i*r+(i-2)*(r+2));let p=0;for(let o=0;o<i;o++){for(let y=0;y<r;y++)h[p++]=o*r+y,h[p++]=(o+1)*r+y;o<i-2&&(h[p++]=(o+1)*r+(r-1),h[p++]=(o+1)*r)}this._vertices=l,this._texCoords=m,this._indices=h}_getFrameInfo(){if(!this.groundControlPoints)return null;const e=this._getFrameControlPoints(),t=this.frameHorizonPoints;let s=null;if(t){const n=t.startX,r=t.startY,i=t.endX,l=t.endY;s=[{sourcePoint:V(n,r),mapPoint:new z(t.startLongitude,t.startLatitude)},{sourcePoint:V(i,l),mapPoint:new z(t.endLongitude,t.endLatitude)}]}return{controlPoints:e,horizon:s}}_getFrameControlPoints(){const e=this.groundControlPoints,t=e?.length;if(!t)return[];const s=new Array(t),n=Math.max(...e.map(({x:i})=>i)),r=this.element.videoWidth/n;for(let i=0;i<t;i++){const{x:l,y:m,lat:h,lon:p}=e[i];s[i]={sourcePoint:V(l*r,-m*r),mapPoint:new z(p,h)}}return s}}const _=new te([255,127,0]);let d=class extends ie(re){constructor(){super(...arguments),this._graphicsLayer=new se,this._frameOutlineGraphic=new v({symbol:new oe({outline:{type:"simple-line",color:_}})}),this._sensorTrailGraphic=new v({symbol:new q({color:_})}),this._lineOfSightGraphic=new v({symbol:new q({color:_})}),this._sensorLocationGraphic=new v({symbol:new R({color:_})}),this._frameCenterGraphic=new v({symbol:new R({color:_,style:"cross"})}),this._overlayContainer=null,this.layer=null,this.symbolColor=_,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=W(this._graphicsLayer)}initialize(){this.addHandles(M(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},b)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new F({frame:this.layer.telemetryDisplay?.frame??!1,frameCenter:this.layer.telemetryDisplay?.frameCenter??!0,frameOutline:this.layer.telemetryDisplay?.frameOutline??!0,lineOfSight:this.layer.telemetryDisplay?.lineOfSight??!0,sensorLocation:this.layer.telemetryDisplay?.sensorLocation??!0,sensorTrail:this.layer.telemetryDisplay?.sensorTrail??!0})}attach(){this._overlayContainer=new ne,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new he({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new le(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([M(()=>[this.layer.telemetryDisplay?.frame,this.layer.telemetryDisplay?.frameCenter,this.layer.telemetryDisplay?.frameOutline,this.layer.telemetryDisplay?.sensorLocation,this.layer.telemetryDisplay?.sensorTrail,this.layer.telemetryDisplay?.lineOfSight],()=>this._updateVisibleTelemetryElements(),b),M(()=>[this.layer.telemetry,this.visibleTelemetryElements?.frameCenter,this.visibleTelemetryElements?.frameOutline,this.visibleTelemetryElements?.sensorLocation,this.visibleTelemetryElements?.sensorTrail,this.visibleTelemetryElements?.lineOfSight],()=>this._updateGraphicGeometries(),b)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=W(this.graphicsView)}supportsSpatialReference(a){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(a){this.graphicsView.processUpdate(a)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frame=this.layer.telemetryDisplay.frame,this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:a}=this.layer,{visibleTelemetryElements:e}=this;a&&e&&(e.frameOutline&&a.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,e.sensorTrail&&a.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,e.lineOfSight&&a.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,e.sensorLocation&&a.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,e.frameCenter&&a.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const a=new me(this.layer.videoElement);this.addAttachHandles([M(()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints],()=>{const{visibleTelemetryElements:e}=this;e?.frame?(a.frameHorizonPoints=this.layer.frameHorizonPoints,a.groundControlPoints=this.layer.groundControlPoints,a.opacity=1):a.opacity=0},b)]),this._overlayContainer.addChild(a),this.view.stage.requestRender()}};x([$()],d.prototype,"graphicsView",void 0),x([$()],d.prototype,"layer",void 0),x([$()],d.prototype,"symbolColor",void 0),x([$({type:F})],d.prototype,"visibleTelemetryElements",void 0),d=x([ae("esri.views.2d.layers.VideoLayerView2D")],d);const mt=d;export{mt as default};
