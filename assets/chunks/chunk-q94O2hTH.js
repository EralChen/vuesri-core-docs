import{a4 as P,C as y,h3 as B,gX as R,h2 as u,a1 as z,lq as M,lr as S,gZ as V,ls as D,h8 as E,h0 as U,h9 as j,h6 as w,h4 as v,h5 as C,hb as A}from"./chunk-fHrNL0KE.js";import"./chunk-DxdXOgnz.js";import"./chunk-aaF08RLl.js";import"./chunk-CJ93w3lF.js";import"./chunk-5sZ8cOm7.js";import"./chunk-qU9ug55b.js";import"./chunk-696gQ_0Y.js";import"./chunk-Gh-YYW1u.js";import"./chunk-dh53Jslg.js";import"./chunk-V7wMI-M1.js";import"./chunk-7WQT7ntw.js";import"./chunk--fAu8HIB.js";import"./chunk-ADeLpH6z.js";import"./chunk-PEmjdORh.js";import"./chunk-udydY4-Q.js";import"./chunk-lUz6pzTx.js";import"./chunk-OtrhsN3k.js";import"./chunk-hwxJk16m.js";import"./chunk-QxXwI5R8.js";import"./chunk-MdcONs9d.js";import"./chunk-webAJys3.js";import"./chunk-Zdebg6g9.js";import"./chunk-UM8yAOgJ.js";import"./chunk-BZyJvBwR.js";import"./chunk-Or-nAgsa.js";import"./chunk-XfrNqGsj.js";import"./chunk-DhGbJNcI.js";import"./chunk-Nw9qefak.js";import"./chunk-k8skosWR.js";import"./chunk-0R7WeF7L.js";import"./chunk-nIGC-Ax6.js";import"./chunk-F9gjVU-T.js";import"./chunk-oBZYJIeq.js";import"./chunk-PtKCC_GV.js";import"./chunk-oP0o3Nh4.js";import"./chunk-khhwXIoB.js";import"./chunk-2fioQh0W.js";import"./chunk-xKJ-Rb1Q.js";import{u as F}from"./chunk-oihAJXyJ.js";import{u as N}from"./chunk-MYTjcHVF.js";function T(a,m={}){const d=m.previewSymbol||new P({color:[255,0,0,0],style:"solid",outline:{color:[255,0,0],width:3,style:"dash"}}),f=m.symbol,e=new y({symbol:d}),t=F(),{viewCursorAdd:h,viewCursorRemove:c}=N("crosshair"),i=new S,l=B(!1);function _(){if(!u(a)){console.error("layerRef is not defined");return}h();const r=t.on("pointer-down",x);i.add(r);const n=t.on("pointer-move",b);i.add(n);const s=t.on("pointer-up",k);i.add(s);const o=t.on("drag",p=>{l.value&&p.stopPropagation()});i.add(o)}function x(r){if(l.value=!0,!t.graphics.includes(e)){const{x:n,y:s}=r,o=t.toMap({x:n,y:s}),p=new z({spatialReference:t.spatialReference,rings:[[[o.x,o.y,o.z],[o.x,o.y,o.z],[o.x,o.y,o.z]]]});e.geometry=p,t.graphics.add(e)}}function b(r){if(!l.value)return;const n=e.geometry,{x:s,y:o}=r,p=t.toMap({x:s,y:o});n.insertPoint(0,n.rings[0].length,p),e.geometry=n.clone()}function k(){g()}function g(){if(l.value=!1,c(),i.removeAll(),!t.graphics.includes(e))return;const r=new y({geometry:M(e.geometry,1e-4),symbol:f});u(a)?.add(r),t.graphics.remove(e)}return R(g),{start:_,complete:g}}const Ro=V({__name:"create",props:{layer:{type:Object,default:void 0}},setup(a){const m=a,d=D(()=>m.layer),{start:f,complete:e}=T(d,{});return(t,h)=>{const c=E("ElButton");return U(),j(A,null,[w(c,{onClick:u(f)},{default:v(()=>[C(" Start ")]),_:1},8,["onClick"]),w(c,{onClick:u(e)},{default:v(()=>[C(" Complete ")]),_:1},8,["onClick"])],64)}}});export{Ro as _};
