import{am as p,s as m,eJ as c,av as u,d2 as l,a1 as o,a2 as a,a4 as d}from"./chunk-CGsGeN7j.js";import{n as y,X as _}from"./chunk-CzhXE6_q.js";import{r as f}from"./chunk-BjhnOvz_.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-BnMlEsYC.js";import"./chunk-5Gv-U3rw.js";import"./chunk-B30Qx12R.js";import"./chunk-D5zmR9t2.js";import"./chunk-sMfePc8G.js";import"./chunk-B7X19rIS.js";import"./chunk-Caulfaw_.js";import"./chunk-Em4vdzlB.js";import"./chunk-03ufMUdO.js";import"./chunk-lZkQ-ll8.js";import"./chunk-DMVWXQbB.js";import"./chunk-kryWk-P1.js";let r=class extends f(_){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([p(()=>this.layer.customParameters,e=>this._worker.streamMessenger.updateCustomParameters(e)),this.layer.on("send-message-to-socket",e=>this._worker.streamMessenger.sendMessageToSocket(e)),this.layer.on("send-message-to-client",e=>{this._worker.streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),p(()=>this.layer.purgeOptions,()=>this._update()),p(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new m("stream-controller",this.pipelineErrorString):null}on(e,s){if(Array.isArray(e))return c(e.map(h=>this.on(h,s)));const t=["data-received","message-received"].includes(e);t&&this._worker.streamMessenger.enableEvent(e,!0);const n=super.on(e,s),i=this;return u(()=>{n.remove(),t&&(i._worker.closed||i.hasEventListener(e)||i._worker.streamMessenger.enableEvent(e,!1))})}queryLatestObservations(e,s){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new m("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return y(this._worker.features.executeQueryForLatestObservations(this._cleanUpQuery(e),s).then(t=>{const n=l.fromJSON(t);return n.features.forEach(i=>{i.layer=this.layer,i.sourceLayer=this.layer}),n}),new l({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this._worker.streamMessenger.disconnect(),this._doPause()}_doConnect(){this._worker.streamMessenger.connect(),this.resume()}_doClear(){this._worker.streamMessenger.clear(),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),s=this;return{...e,get container(){return s.featureContainer},setProperty:t=>{this.set(t.propertyName,t.value)}}}};o([a()],r.prototype,"pipelineConnectionStatus",void 0),o([a()],r.prototype,"pipelineErrorString",void 0),o([a({readOnly:!0})],r.prototype,"connectionError",null),o([a({readOnly:!0})],r.prototype,"_streamConnectionStatus",null),r=o([d("esri.views.2d.layers.StreamLayerView2D")],r);const ce=r;export{ce as default};
