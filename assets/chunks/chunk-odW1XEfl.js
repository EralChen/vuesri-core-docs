import{b$ as h,C as y,he as M,h2 as g,lN as f,lO as U,bR as w,lP as E,gZ as N,lv as V,h8 as $,h0 as z,h9 as O,h6 as C,h4 as b,h5 as v,hb as T}from"./chunk-r79-UitW.js";import{u as j}from"./chunk-QlMQA5MY.js";import"./chunk-f-qDskxj.js";import"./chunk-QQWeD_ir.js";import"./chunk-c4b-Yaea.js";import"./chunk-EpNfzgt8.js";import"./chunk-GaQCtJAj.js";import"./chunk-iJFM8kcj.js";import"./chunk-MO7AtA6M.js";import"./chunk-A1k3Sw6V.js";import"./chunk-HbTg3DvT.js";import"./chunk-woU6z8Ei.js";import"./chunk-CaitbKEY.js";import"./chunk-ioYUBtQg.js";import"./chunk-AIkMVrBB.js";import"./chunk-zPn7vAq8.js";import"./chunk-Nl6L5Sha.js";import"./chunk-XYcYaV54.js";import"./chunk-oiJm1HFG.js";import"./chunk-Ze2sBanE.js";import"./chunk-A-93cahJ.js";import"./chunk-i8Hri-Zk.js";import"./chunk-qSwNteA0.js";import"./chunk-wpULlYmq.js";import"./chunk-9hAMyKdI.js";import"./chunk-HHSX2f6G.js";import"./chunk-rzTdRPKU.js";import"./chunk-nGBmUvPo.js";import"./chunk-F6pmMbG8.js";import"./chunk-UcyyodeN.js";import"./chunk-AWcxOjZK.js";import"./chunk-vpjPN8w4.js";import"./chunk-8GNmAK67.js";import"./chunk-ozya2Jv4.js";import"./chunk-56-EE9ID.js";import"./chunk-v81I-D8v.js";import"./chunk-yfXX26rS.js";import"./chunk-Z_IYtaAq.js";import"./chunk-V9_cq-fp.js";const A=(m,p)=>{const l=p?.centerControlPointSymbol||new h({color:[255,0,0],size:10,style:"circle",outline:{color:[255,255,255],width:2}}),d=p?.radiusControlPointSymbol||new h({color:[255,0,0],size:10,style:"circle",outline:{color:[255,255,255],width:2}}),t=j(),s=new E,n=new y({symbol:l}),e=new y({symbol:d}),c=M();function P(){const o=g(m);if(!o){console.error("Graphic is not defined");return}const u=o.geometry,x=u.centroid;n.geometry=x,t.graphics.add(n);const R=u.getPoint(0,Math.floor(u.rings[0].length/12));e.geometry=R,t.graphics.add(e);const k=t.on("drag",i=>{c.value&&i.stopPropagation()});s.add(k);const S=t.on("pointer-move",i=>{if(c.value===n){const r=t.toMap({x:i.x,y:i.y});n.geometry=r,o.geometry=new f({...o.geometry,center:r,radius:o.geometry.radius,radiusUnit:o.geometry.radiusUnit});const a=o.geometry.getPoint(0,Math.floor(o.geometry.rings[0].length/12));e.geometry=a}if(c.value===e){const r=t.toMap({x:i.x,y:i.y});e.geometry=r;const a=n.geometry,H=U(new w({latitude:a.latitude,longitude:a.longitude,spatialReference:t.spatialReference}),new w({longitude:r.longitude,latitude:r.latitude,spatialReference:t.spatialReference}),"meters");o.geometry=new f({...o.geometry,center:a,radius:H,radiusUnit:"meters"})}});s.add(S);const B=t.on("pointer-down",i=>{t.hitTest(i).then(r=>{if(r.results.length){const a=r.results[0].graphic;c.value=a}})}),G=t.on("pointer-up",()=>{c.value=void 0});s.add(B),s.add(G)}function _(){s.removeAll(),t.graphics.remove(n),t.graphics.remove(e)}return{start:P,complate:_}},St=N({__name:"update",props:{graphic:{type:Object,default:void 0}},setup(m){const p=m,l=V(()=>p.graphic),{start:d,complate:t}=A(l);return(s,n)=>{const e=$("ElButton");return z(),O(T,null,[C(e,{onClick:g(d)},{default:b(()=>[v(" Start ")]),_:1},8,["onClick"]),C(e,{onClick:g(t)},{default:b(()=>[v(" Complate ")]),_:1},8,["onClick"])],64)}}});export{St as _};
