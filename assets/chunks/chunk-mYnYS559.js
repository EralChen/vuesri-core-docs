import{b$ as y,C as f,he as H,gX as M,h2 as g,lQ as w,lR as E,bR as C,lr as V,gZ as $,ls as z,h8 as N,h0 as T,h9 as j,h6 as b,h4 as _,h5 as v,hb as A}from"./chunk-fHrNL0KE.js";import{u as D}from"./chunk-oihAJXyJ.js";import"./chunk-DxdXOgnz.js";import"./chunk-aaF08RLl.js";import"./chunk-CJ93w3lF.js";import"./chunk-5sZ8cOm7.js";import"./chunk-qU9ug55b.js";import"./chunk-696gQ_0Y.js";import"./chunk-Gh-YYW1u.js";import"./chunk-dh53Jslg.js";import"./chunk-V7wMI-M1.js";import"./chunk-7WQT7ntw.js";import"./chunk--fAu8HIB.js";import"./chunk-ADeLpH6z.js";import"./chunk-PEmjdORh.js";import"./chunk-udydY4-Q.js";import"./chunk-lUz6pzTx.js";import"./chunk-OtrhsN3k.js";import"./chunk-hwxJk16m.js";import"./chunk-QxXwI5R8.js";import"./chunk-MdcONs9d.js";import"./chunk-webAJys3.js";import"./chunk-Zdebg6g9.js";import"./chunk-UM8yAOgJ.js";import"./chunk-BZyJvBwR.js";import"./chunk-Or-nAgsa.js";import"./chunk-XfrNqGsj.js";import"./chunk-DhGbJNcI.js";import"./chunk-Nw9qefak.js";import"./chunk-k8skosWR.js";import"./chunk-0R7WeF7L.js";import"./chunk-nIGC-Ax6.js";import"./chunk-F9gjVU-T.js";import"./chunk-oBZYJIeq.js";import"./chunk-PtKCC_GV.js";import"./chunk-oP0o3Nh4.js";import"./chunk-khhwXIoB.js";import"./chunk-2fioQh0W.js";import"./chunk-xKJ-Rb1Q.js";const F=(p,m)=>{const l=m?.centerControlPointSymbol||new y({color:[255,0,0],size:10,style:"circle",outline:{color:[255,255,255],width:2}}),d=m?.radiusControlPointSymbol||new y({color:[255,0,0],size:10,style:"circle",outline:{color:[255,255,255],width:2}}),t=D(),s=new V,i=new f({symbol:l}),e=new f({symbol:d}),c=H();function P(){const o=g(p);if(!o){console.error("Graphic is not defined");return}const u=o.geometry,R=u.centroid;i.geometry=R,t.graphics.add(i);const x=u.getPoint(0,Math.floor(u.rings[0].length/12));e.geometry=x,t.graphics.add(e);const k=t.on("drag",n=>{c.value&&n.stopPropagation()});s.add(k);const B=t.on("pointer-move",n=>{if(c.value===i){const r=t.toMap({x:n.x,y:n.y});i.geometry=r,o.geometry=new w({...o.geometry,center:r,radius:o.geometry.radius,radiusUnit:o.geometry.radiusUnit});const a=o.geometry.getPoint(0,Math.floor(o.geometry.rings[0].length/12));e.geometry=a}if(c.value===e){const r=t.toMap({x:n.x,y:n.y});e.geometry=r;const a=i.geometry,G=E(new C({latitude:a.latitude,longitude:a.longitude,spatialReference:t.spatialReference}),new C({longitude:r.longitude,latitude:r.latitude,spatialReference:t.spatialReference}),"meters");o.geometry=new w({...o.geometry,center:a,radius:G,radiusUnit:"meters"})}});s.add(B);const S=t.on("pointer-down",n=>{t.hitTest(n).then(r=>{if(r.results.length){const a=r.results[0].graphic;c.value=a}})}),U=t.on("pointer-up",()=>{c.value=void 0});s.add(S),s.add(U)}function h(){s.removeAll(),t.graphics.remove(i),t.graphics.remove(e)}return M(h),{start:P,complete:h}},St=$({__name:"update",props:{graphic:{type:Object,default:void 0}},setup(p){const m=p,l=z(()=>m.graphic),{start:d,complete:t}=F(l);return(s,i)=>{const e=N("ElButton");return T(),j(A,null,[b(e,{onClick:g(d)},{default:_(()=>[v(" Start ")]),_:1},8,["onClick"]),b(e,{onClick:g(t)},{default:_(()=>[v(" Complate ")]),_:1},8,["onClick"])],64)}}});export{St as _};
