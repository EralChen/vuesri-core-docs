import{u as f}from"./chunk-mQ0J7OJ8.js";import{gW as v,g$ as g,lw as y,nB as _,g_ as l,he as V}from"./chunk-YzRi88Dj.js";import{T as H}from"./chunk-Ch0SDxT-.js";function S(){const o=v("vaParentView");if(!o)throw new Error("No parent view provided");return o}class u extends H{constructor(i,r){super(),this.originView=i,this.targetView=r}add(){this.handler||(this.handler=this.originView.watch("viewpoint",i=>{this.targetView.viewpoint=i}),this.removeHandler=()=>{this.handler?.remove(),this.handler=null})}}const I=g({__name:"index",props:{syncKey:{type:String,default:"__va_derived_view_sync_init__"},synchronization:{type:String,default:"one-way"}},setup(o){const i=o,r=i.syncKey,e=S();e[r]||(e[r]=new Map);const n=f(),c=new u(e,n),a=new u(n,e),p=y(()=>i.synchronization==="two-way");_(()=>{n.when(()=>{e.viewpoint&&(n.viewpoint=e.viewpoint)})}),w();function w(){if(a.remove(),c.handler||(c.add(),!p.value))return;const t=n.watch("interacting, animation",s=>{s&&(c.remove(),e[r].forEach((d,h)=>{h!==n&&d()}),t.remove())})}e[r].set(n,()=>w());const m=e.watch("interacting, animation",t=>{t&&w()});if(l(()=>{m.remove()}),p.value){const t=n.watch("interacting, animation",s=>{if(!s||a.handler)return;a.add();const d=e.watch("interacting, animation",h=>{h&&(a.remove(),d.remove())})});l(()=>{t.remove()})}return(t,s)=>V(t.$slots,"default")}});export{I as _};
