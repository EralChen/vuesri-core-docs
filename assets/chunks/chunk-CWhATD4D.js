import{V as P,a1 as i,a2 as s,eU as q,a4 as T,jl as C,an as F,at as N,eV as U,jT as B,e4 as E,aH as D,bB as z,fj as j,cf as G,ci as X,cJ as k,ap as I}from"./chunk-CMhy9c9G.js";import{d as H}from"./chunk-DGon5N4o.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-BTcmAMPz.js";const $=P.ofType(H);let l=class extends C{constructor(e){super(e),this.type="viewshed",this._extent=null}initialize(){this.addHandles(F(()=>this._computeExtent(),e=>{e.pending==null&&(this._extent=e.extent)},N))}get viewsheds(){return this._get("viewsheds")||new $}set viewsheds(e){this._set("viewsheds",U(e,this.viewsheds,$))}get spatialReference(){for(const e of this.viewsheds)if(e.observer!=null)return e.observer.spatialReference;return null}get extent(){return this._extent}get requiredPropertiesForEditing(){return this.viewsheds.items.map(({observer:e})=>e)}async waitComputeExtent(){const e=this._computeExtent();e.pending!=null&&await e.pending}_computeExtent(){const{spatialReference:e}=this;if(e==null)return{pending:null,extent:null};const p=this.viewsheds.filter(r=>r.observer!=null),m=p.map(r=>r.observer).toArray(),o=B(m,e);return o.pending!=null?{pending:o.pending,extent:null}:{pending:null,extent:o.geometries.map((r,u)=>{const x=p.at(u);return r!=null&&x!=null?this._computeViewshedExtent(this.viewsheds.at(u),r):null}).filter(r=>r!=null).reduce((r,u)=>K(r,u),null)}}_computeViewshedExtent(e,p){const{farDistance:m,heading:o,tilt:r,horizontalFieldOfView:u,verticalFieldOfView:x}=e,{spatialReference:R}=p,g=u/2,V=x/2,b=m/R.metersPerUnit,J=[E.normalize(o-g),o,E.normalize(o+g)],d=D.fromPoint(p),v=w=>{const h=J.map(a=>E.normalize(a-w));if(h[0]>h[2]||u===360)return b;const c=h.map(a=>Math.abs(a>180?360-a:a)).reduce((a,f)=>a>f?f:a);return c>90?0:b*Math.cos(z(c))};d.xmax+=v(90),d.xmin-=v(-90),d.ymax+=v(0),d.ymin-=v(180);const y=p.z;if(y!=null){let w=y,h=y;const c=r-90,a=j(c+V,-90,90),f=j(c-V,-90,90),O=R?.isGeographic?m:b;w+=O*_(a),h+=O*_(f);const S=A(V)*O,M=_(c)*S*(1-A(g));r<90&&(w-=M),r>90&&(h-=M),d.zmax=Math.max(w,y),d.zmin=Math.min(h,y)}return d}clear(){this.viewsheds.removeAll()}};function K(t,e){return t==null?e:e==null?t:t.union(e)}function A(t){return Math.cos(z(t))}function _(t){return Math.sin(z(t))}i([s({type:["viewshed"]})],l.prototype,"type",void 0),i([s({cast:q,type:$,nonNullable:!0})],l.prototype,"viewsheds",null),i([s({readOnly:!0})],l.prototype,"spatialReference",null),i([s()],l.prototype,"_extent",void 0),i([s({readOnly:!0})],l.prototype,"extent",null),i([s({readOnly:!0})],l.prototype,"requiredPropertiesForEditing",null),l=i([T("esri.analysis.ViewshedAnalysis")],l);const L=l;let n=class extends G(X(I)){constructor(t){super(t),this.type="viewshed",this.operationalLayerType="ViewshedLayer",this.source=new L,this.opacity=1}initialize(){this.addHandles(F(()=>this.source,(t,e)=>{e!=null&&e.parent===this&&(e.parent=null),t!=null&&(t.parent=this)},N))}async load(){return this.addResolvingPromise(this.source.waitComputeExtent()),this}get spatialReference(){return this.source.spatialReference}get fullExtent(){return this.source.extent}releaseAnalysis(t){this.source===t&&(this.source=new L)}get analysis(){return this.source}set analysis(t){this.source=t}get viewsheds(){return this.source.viewsheds}set viewsheds(t){this.source.viewsheds=t}writeViewsheds(t,e,p,m){e.viewsheds=t.filter(o=>o.isValid()).map(o=>o.toJSON(m)).toJSON()}};i([s({json:{read:!1},readOnly:!0})],n.prototype,"type",void 0),i([s({type:["ViewshedLayer"]})],n.prototype,"operationalLayerType",void 0),i([s({nonNullable:!0})],n.prototype,"source",void 0),i([s({readOnly:!0})],n.prototype,"spatialReference",null),i([s({readOnly:!0})],n.prototype,"fullExtent",null),i([s({readOnly:!0,json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],n.prototype,"opacity",void 0),i([s({type:["show","hide"]})],n.prototype,"listMode",void 0),i([s({type:P.ofType(H),json:{write:{ignoreOrigin:!0},origins:{"web-scene":{write:{ignoreOrigin:!0}}}}})],n.prototype,"viewsheds",null),i([k("web-scene","viewsheds")],n.prototype,"writeViewsheds",null),n=i([T("esri.layers.ViewshedLayer")],n);const Pe=n;export{Pe as default};
