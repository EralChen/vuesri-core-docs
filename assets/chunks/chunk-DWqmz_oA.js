import{aT as w,hq as z,hj as M,hr as F}from"./chunk-CMhy9c9G.js";import{e as g}from"./chunk-CD9yU3wS.js";import{CIMSymbolRasterizer as $}from"./chunk-BW82cvYu.js";import{t as b,l as G}from"./chunk-D5HkvLxU.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-DNnuvc1i.js";import"./chunk-CUzevAry.js";import"./chunk-CZqKK-Wg.js";import"./chunk-DkqiPko-.js";import"./chunk-8WtPGj6h.js";const u=new $(null),c=w(b.size),v=w(b.maxSize),S=w(b.lineWidth),O=1;async function R(l,e,a){const i=e?.size;let t=i!=null&&typeof i=="object"&&"width"in i?i.width:i,o=i!=null&&typeof i=="object"&&"height"in i?i.height:i;if(t==null||o==null)if(a==="esriGeometryPolygon")t=c,o=c;else{const r=await V(l,e,a);r&&(t=r.width,o=r.height),a==="esriGeometryPolyline"&&(t=S),t=t!=null&&isFinite(t)?Math.min(t,v):c,o=o!=null&&isFinite(o)?Math.max(Math.min(o,v),O):c}return e.style==="legend"&&a==="esriGeometryPolyline"&&(t=S),{width:t,height:o}}async function V(l,e,a){const{feature:i,fieldMap:t,viewParams:o}=e.cimOptions||e,r=await F.resolveSymbolOverrides(l.data,i,null,t,a,null,o);if(!r)return null;(l=l.clone()).data={type:"CIMSymbolReference",symbol:r},l.data.primitiveOverrides=void 0;const n=[];return g.fetchResources(r,u.resourceManager,n),g.fetchFonts(r,u.resourceManager,n),n.length>0&&await Promise.all(n),g.getEnvelope(r,null,u.resourceManager)}async function Pt(l,e={}){const{node:a,opacity:i,symbolConfig:t}=e,o=t!=null&&typeof t=="object"&&"isSquareFill"in t&&t.isSquareFill,r=e.cimOptions||e,n=r.geometryType||z(l?.data?.symbol),h=await R(l,e,n),{feature:C,fieldMap:P}=r,I=o||n!=="esriGeometryPolygon"?"preview":"legend",y=await u.rasterizeCIMSymbolAsync(l,C,h,I,P,n,null,r.viewParams,r.allowScalingUp);if(!y)return null;const{width:L,height:j}=y,p=document.createElement("canvas");p.width=L,p.height=j,p.getContext("2d").putImageData(y,0,0);const f=M(h.width),d=M(h.height),m=new Image(f,d);m.src=p.toDataURL(),m.ariaLabel=e.ariaLabel??null,m.alt=e.ariaLabel??"",i!=null&&(m.style.opacity=`${i}`);let s=m;if(e.effectView!=null){const x={shape:{type:"image",x:0,y:0,width:f,height:d,src:m.src},fill:null,stroke:null,offset:[0,0]};s=G([[x]],[f,d],{effectView:e.effectView,ariaLabel:e.ariaLabel})}return a&&s&&a.appendChild(s),s}export{Pt as previewCIMSymbol};
