import{bu as f,ih as h,dQ as g,lf as x,lg as l,a1 as E,a4 as v,lh as b,li as y,bq as p,c0 as L,fT as V,lj as j,lk as P,ll as C,lm as m}from"./chunk-YzRi88Dj.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */const S=1e3;function I(t,i,o){const e=x(),s=l(e);return f(s,s,t,.5),f(s,s,i,.5),e[3]=h(s,t),g(s,s,o),e}let _=class{constructor(){this._idToComponent=new Map,this._components=new b(t=>t.bounds),this._edges=new b(t=>t.bounds),this._tmpLineSegment=y(),this._tmpP1=p(),this._tmpP2=p(),this._tmpP3=p(),this.remoteClient=null}async fetchCandidates(t,i){await Promise.resolve(),L(i),await this._ensureEdgeLocations(t,i);const o=[];return this._edges.forEachNeighbor(e=>(this._addCandidates(t,e,o),o.length<S),t.bounds),{result:{candidates:o}}}async _ensureEdgeLocations(t,i){const o=[];if(this._components.forEachNeighbor(n=>{if(n.info==null){const{id:a,uid:r}=n;o.push({id:a,uid:r})}return!0},t.bounds),!o.length)return;const e={components:o},s=await this.remoteClient.invoke("fetchAllEdgeLocations",e,i??{});for(const n of s.components)this._setFetchEdgeLocations(n)}async add(t){const i=new u(t.id,t.bounds);return this._idToComponent.set(i.id,i),this._components.add([i]),{result:{}}}async remove(t){const i=this._idToComponent.get(t.id);if(i){const o=[];this._edges.forEachNeighbor(e=>(e.component===i&&o.push(e),!0),i.bounds),this._edges.remove(o),this._components.remove([i]),this._idToComponent.delete(i.id)}return{result:{}}}_setFetchEdgeLocations(t){const i=this._idToComponent.get(t.id);if(i==null||t.uid!==i.uid)return;const o=V.createView(t.locations),e=new Array(o.count),s=p(),n=p();for(let d=0;d<o.count;d++){o.position0.getVec(d,s),o.position1.getVec(d,n);const c=I(s,n,t.origin),w=new T(i,d,c);e[d]=w}this._edges.add(e);const{objectIds:a,origin:r}=t;i.info={locations:o,objectIds:a,origin:r}}_addCandidates(t,i,o){const{info:e}=i.component,{origin:s,objectIds:n}=e,a=e.locations,r=a.position0.getVec(i.index,this._tmpP1),d=a.position1.getVec(i.index,this._tmpP2);g(r,r,s),g(d,d,s);const c=n[a.componentIndex.get(i.index)];this._addEdgeCandidate(t,c,r,d,o),this._addVertexCandidate(t,c,r,o),this._addVertexCandidate(t,c,d,o)}_addEdgeCandidate(t,i,o,e,s){if(!t.returnEdge)return;const n=l(t.bounds),a=j(o,e,this._tmpLineSegment),r=P(a,n,this._tmpP3);C(t.bounds,r)&&s.push({type:"edge",objectId:i,target:m(r),distance:h(n,r),start:m(o),end:m(e)})}_addVertexCandidate(t,i,o,e){if(!t.returnVertex||!C(t.bounds,o))return;const s=l(t.bounds);e.push({type:"vertex",objectId:i,target:m(o),distance:h(s,o)})}};_=E([v("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],_);const ut=_;class u{constructor(i,o){this.id=i,this.bounds=o,this.info=null,this.uid=++u.uid}}u.uid=0;class T{constructor(i,o,e){this.component=i,this.index=o,this.bounds=e}}export{ut as default};
