import{bF as c,s as d,ei as h,ej as y,ee as u,ek as n,ef as f,z as g,el as v,a1 as l,a2 as m,a4 as w}from"./chunk-CMhy9c9G.js";import{l as $}from"./chunk-CgSr3-7H.js";import{p as D}from"./chunk-Dni0iGGN.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */let i=class extends D($(c)){constructor(){super(...arguments),this.type="elevation-3d"}get tileInfo(){return this.layer.tileInfo}initialize(){const e=this.view,t=e.map?.allLayers,r=t&&t.includes(this.layer),o=e.map?.ground?.layers,s=o&&o.includes(this.layer);if(r&&!s){const a=new d("layerview:elevation-layer-only",`3D elevation layer '${this.layer.id}' can only be added to layers in map.ground`);this.addResolvingPromise(Promise.reject(a))}this._lercDecoder=h(e.resourceController),this._addTilingSchemeMatchPromise()}destroy(){this._lercDecoder=y(this._lercDecoder)}async fetchTile(e,t){const r=this.layer;if(u(r)){const p=await r.fetchTile(e[0],e[1],e[2],{noDataValue:n,signal:t.signal});return f(t)?void g.getLogger(this).warnOnce("A call to fetchTile resolved even though the request was aborted. fetchTile should not resolve if options.signal.aborted is true."):p}const o=this.getTileUrl(e),s=await t.requester.request(o,"binary",t),a=await this._lercDecoder.decode(s,{noDataValue:n},t.signal);if(a)return new v(a);throw new Error("LERC decoding failed")}};l([m()],i.prototype,"layer",void 0),l([m()],i.prototype,"tileInfo",null),i=l([w("esri.views.3d.layers.ElevationLayerView3D")],i);const oe=i;export{oe as default};
