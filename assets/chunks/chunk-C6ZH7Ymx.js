import{a1 as i,a2 as s,a4 as g,a5 as m,e9 as f,gx as b,ny as k,ln as C,bq as S,$ as H,fm as L,cm as $,nz as E,eK as _,eG as O,c0 as I,q as V}from"./chunk-YzRi88Dj.js";import{r as x}from"./chunk-CPRPN6po.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */let d=class extends m{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new R(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const o=e.coordinateHelper,{point:u}=e,n=P;this.renderCoordsHelper.toRenderCoords(u,o.spatialReference,n);const p=e.distance,c=typeof p=="number"?p:p.distance,h=await this._workerHandle.invoke({bounds:f(n[0],n[1],n[2],c),returnEdge:e.returnEdge,returnVertex:e.vertexMode!=="none"},t);return h.candidates.sort((y,v)=>y.distance-v.distance),h.candidates.map(y=>this._convertCandidate(o,y))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new b({objectId:t.objectId,targetPoint:this._convertRenderCoordinate(e,t.target),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new x({objectId:t.objectId,targetPoint:this._convertRenderCoordinate(e,t.target),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const o=S();return this.renderCoordsHelper.fromRenderCoords(t,o,e),k(o)}async _fetchAllEdgeLocations(e,t){const o=[],u=[];for(const{id:n,uid:p}of e.components)this._ids.has(n)&&o.push((async()=>{const c=await this.fetchEdgeLocations(n,t.signal),h=c.locations.buffer;return u.push(h),{id:n,uid:p,objectIds:c.objectIds,locations:h,origin:c.origin,type:c.type}})());return{result:{components:(await Promise.all(o)).filter(({id:n})=>this._ids.has(n))},transferList:u}}};i([s({constructOnly:!0})],d.prototype,"renderCoordsHelper",void 0),i([s({constructOnly:!0})],d.prototype,"fetchEdgeLocations",void 0),i([s({constructOnly:!0})],d.prototype,"schedule",void 0),i([s({readOnly:!0})],d.prototype,"availability",void 0),d=i([g("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],d);class R extends C{constructor(e,t){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},e,{strategy:"dedicated",client:t})}}const P=S();let a=class extends m{get updating(){return this._updatingHandles.updating}constructor(r){super(r),this.availability=1,this._updatingHandles=new H,this._abortController=new AbortController}destroy(){this._tracker=L(this._tracker),this._abortController=$(this._abortController),this._updatingHandles.destroy()}initialize(){const{view:r}=this,e=r.resourceController;this._edgeWorker=new E(w(e)),this._workerHandle=new d({renderCoordsHelper:this.view.renderCoordsHelper,schedule:w(e),fetchEdgeLocations:async(t,o)=>{if(this._tracker==null)throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(t,this._edgeWorker,o)}}),this._updatingHandles.addPromise(this._setupLayerView()),this.addHandles([_(this._workerHandle),_(this._edgeWorker)])}async fetchCandidates(r,e){return this._workerHandle.fetchCandidates(r,e)}refresh(){}async _setupLayerView(){if(this.destroyed)return;const r=this._abortController?.signal,e=await this.getLayerView();e==null||O(r)||(this._tracker=e.trackSnappingSources({add:(t,o)=>{this._updatingHandles.addPromise(this._workerHandle.add({id:t,bounds:o},r))},remove:t=>{this._updatingHandles.addPromise(this._workerHandle.remove({id:t},r))}}))}};function w(r){return e=>r.immediate.schedule(e)}i([s({constructOnly:!0})],a.prototype,"getLayerView",void 0),i([s({constructOnly:!0})],a.prototype,"view",void 0),i([s({readOnly:!0})],a.prototype,"updating",null),i([s({readOnly:!0})],a.prototype,"availability",void 0),a=i([g("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],a);let l=class extends m{get updating(){return this._i3sSources.some(r=>r.updating)}constructor(r){super(r),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach(r=>r.destroy()),this._i3sSources.length=0}initialize(){const{view:r}=this,e=this.layerSource.layer;this._i3sSources=e.type==="building-scene"?this._getBuildingSceneI3SSources(r,e):[this._getSceneLayerI3SSource(r,e)]}async fetchCandidates(r,e){const t=await Promise.all(this._i3sSources.map(o=>o.fetchCandidates(r,e)));return I(e),t.flat()}refresh(){this._i3sSources.forEach(r=>r.refresh())}_getBuildingSceneI3SSources(r,e){return e.allSublayers.toArray().map(t=>t.type==="building-component"?new a({getLayerView:async()=>(await r.whenLayerView(e)).whenSublayerView(t),view:r}):null).filter(V)}_getSceneLayerI3SSource(r,e){return new a({getLayerView:async()=>{const t=await r.whenLayerView(e);return t.type==="scene-layer-graphics-3d"?void 0:t},view:r})}};i([s({constructOnly:!0})],l.prototype,"layerSource",void 0),i([s({constructOnly:!0})],l.prototype,"view",void 0),i([s({readOnly:!0})],l.prototype,"updating",null),i([s({readOnly:!0})],l.prototype,"availability",void 0),l=i([g("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],l);export{l as SceneLayerSnappingSource};
