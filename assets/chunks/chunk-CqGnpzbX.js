import{bj as w,gQ as z,hv as v,gR as F,gS as d}from"./chunk-CGsGeN7j.js";import{CIMSymbolRasterizer as R}from"./chunk-CgS31l6v.js";import{t as b,l as G}from"./chunk-BIIrU_EI.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-CvLOc7fe.js";const u=new R(null),c=w(b.size),M=w(b.maxSize),S=w(b.lineWidth),O=1;async function V(l,t,a){const i=t?.size;let e=i!=null&&typeof i=="object"&&"width"in i?i.width:i,r=i!=null&&typeof i=="object"&&"height"in i?i.height:i;if(e==null||r==null)if(a==="esriGeometryPolygon")e=c,r=c;else{const o=await $(l,t,a);o&&(e=o.width,r=o.height),a==="esriGeometryPolyline"&&(e=S),e=e!=null&&isFinite(e)?Math.min(e,M):c,r=r!=null&&isFinite(r)?Math.max(Math.min(r,M),O):c}return t.style==="legend"&&a==="esriGeometryPolyline"&&(e=S),{width:e,height:r}}async function $(l,t,a){const{feature:i,fieldMap:e,viewParams:r}=t.cimOptions||t,o=await F.resolveSymbolOverrides(l.data,i,null,e,a,null,r);if(!o)return null;(l=l.clone()).data={type:"CIMSymbolReference",symbol:o},l.data.primitiveOverrides=void 0;const n=[];return d.fetchResources(o,u.resourceManager,n),d.fetchFonts(o,u.resourceManager,n),n.length>0&&await Promise.all(n),d.getEnvelope(o,null,u.resourceManager)}async function be(l,t={}){const{node:a,opacity:i,symbolConfig:e}=t,r=e!=null&&typeof e=="object"&&"isSquareFill"in e&&e.isSquareFill,o=t.cimOptions||t,n=o.geometryType||z(l?.data?.symbol),h=await V(l,t,n),{feature:C,fieldMap:P}=o,I=r||n!=="esriGeometryPolygon"?"preview":"legend",f=await u.rasterizeCIMSymbolAsync(l,C,h,I,P,n,null,o.viewParams,o.allowScalingUp);if(!f)return null;const{width:L,height:j}=f,p=document.createElement("canvas");p.width=L,p.height=j,p.getContext("2d").putImageData(f,0,0);const y=v(h.width),g=v(h.height),m=new Image(y,g);m.src=p.toDataURL(),m.ariaLabel=t.ariaLabel??null,m.alt=t.ariaLabel??"",i!=null&&(m.style.opacity=`${i}`);let s=m;if(t.effectView!=null){const x={shape:{type:"image",x:0,y:0,width:y,height:g,src:m.src},fill:null,stroke:null,offset:[0,0]};s=G([[x]],[y,g],{effectView:t.effectView,ariaLabel:t.ariaLabel})}return a&&s&&a.appendChild(s),s}export{be as previewCIMSymbol};
