import{d2 as E,d1 as y,E as S,cL as w,ec as d,bd as D,ed as M,ee as N,ef as h,eg as F,eh as T,A as I}from"./chunk-CGsGeN7j.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */const l=()=>I.getLogger("esri.rest.support.meshFeatureSet");function dt(t,e,r){const o=r.features;r.features=[],delete r.geometryType;const s=E.fromJSON(r);if(s.geometryType="mesh",!r.assetMaps)return s;const n=$(e,r.assetMaps),i=t.sourceSpatialReference??y.WGS84,m=r.globalIdFieldName,{outFields:a}=t,c=a!=null&&a.length>0?L(a.includes("*")?null:new Set(a)):()=>({});for(const p of o){const u=x(p,m,i,e,n);u!=null&&s.features.push(new S({geometry:u,attributes:c(p)}))}return s}function L(t){return({attributes:e})=>{if(!e)return{};if(!t)return e;for(const r in e)t.has(r)||delete e[r];return e}}function x(t,e,r,o,s){const n=t.attributes[e],i=s.get(n);if(i==null)return l().error("mesh-feature-set:asset-not-found","Service returned a feature which was not found in the asset map",t),null;if(!t.geometry)return l().error("mesh-feature-set:no-geometry","Service returned a feature without geometry",t),null;const m=A(t,r,o),a=w.fromJSON(t.geometry);a.spatialReference=r;const c=O(t.attributes,o),p=r.isGeographic?"local":"georeferenced",u=b(i);return u?d.createWithExternalSource(m,u,{extent:a,transform:c,vertexSpace:p}):d.createIncomplete(m,{extent:a,transform:c,vertexSpace:p})}function A({attributes:t},e,{transformFieldRoles:r}){const o=t[r.originX],s=t[r.originY],n=t[r.originZ];return new D({x:o,y:s,z:n,spatialReference:e})}function O(t,{transformFieldRoles:e}){return new M({translation:[t[e.translationX],-t[e.translationZ],t[e.translationY]],rotationAxis:[t[e.rotationX],-t[e.rotationZ],t[e.rotationY]],rotationAngle:t[e.rotationDeg],scale:[t[e.scaleX],t[e.scaleZ],t[e.scaleY]]})}var f;function $(t,e){const r=new Map;for(const o of e){const s=o.parentGlobalId;if(s==null)continue;const n=o.assetName,i=o.assetType,m=o.assetHash,a=o.assetURL,c=o.conversionStatus,p=o.seqNo,u=N(i,t.supportedFormats);if(!u){l().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const g=h(r,s,()=>({files:new Map}));h(g.files,n,()=>({name:n,type:i,mimeType:u,status:P(c),parts:[]})).parts[p]={hash:m,url:a}}return r}function b(t){const e=Array.from(t.files.values()),r=new Array;for(const o of e){if(o.status!==f.COMPLETED)return null;const s=new Array;for(const n of o.parts){if(!n)return null;s.push(new F(n.url,n.hash))}r.push(new T(o.name,o.mimeType,s))}return r}function P(t){switch(t){case"COMPLETED":case"SUBMITTED":return f.COMPLETED;case"INPROGRESS":return f.PENDING;default:return f.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(f||(f={}));export{$ as assetMapFromAssetMapsJSON,x as extractMesh,dt as meshFeatureSetFromJSON};
