import{a6 as P,E as v,gU as R,gN as B,gT as u,a3 as V,ln as E,kX as M,gO as S,lo as U,gZ as z,gR as D,g_ as N,gW as w,gV as h,gX as C,h0 as T}from"./chunk-CMhy9c9G.js";import"./chunk-BY_FN4O4.js";import"./chunk-Dx0NO5tE.js";import"./chunk-hcQCkdqJ.js";import"./chunk-BCEYKtyI.js";import"./chunk-DfjCgXDb.js";import"./chunk-DIHKnm4l.js";import"./chunk-TufeK50d.js";import"./chunk-Dck1UqdK.js";import"./chunk-B4Rwpdzs.js";import"./chunk-igt1gBeK.js";import"./chunk-Cj_Zd08g.js";import"./chunk-BG40D5IJ.js";import"./chunk-Dzc4VObD.js";import"./chunk-DjjaYBlz.js";import"./chunk-CM_lIypp.js";import"./chunk-CmV2Xkqf.js";import"./chunk-CbY12eax.js";import"./chunk-BcJWwafW.js";import"./chunk-ClYvIdCO.js";import"./chunk-QvQIJROn.js";import"./chunk-CdctZqhD.js";import"./chunk-DaHzAMiu.js";import"./chunk-C1aYhagP.js";import"./chunk-BU_CQVD8.js";import"./chunk-D_aEPSIR.js";import"./chunk-CAaD5fpi.js";import"./chunk-C0Px4IH5.js";import"./chunk-gN39URxt.js";import"./chunk-HNqUD5wH.js";import"./chunk-3xYMskso.js";import"./chunk-etnkt-xL.js";import"./chunk-oE2be0WM.js";import"./chunk-BnPJJ4xW.js";import"./chunk-DdA8NjGq.js";import"./chunk-scr1RBcv.js";import"./chunk-BVa6-kjc.js";import"./chunk-CIKSIPV2.js";import{u as A}from"./chunk-Dc5RCiI0.js";import{u as F}from"./chunk-Bza_EozM.js";function G(m,l={}){const g=l.previewSymbol||new P({color:[255,0,0,0],style:"solid",outline:{color:[255,0,0],width:3,style:"dash"}}),f=l.symbol,e=new v({symbol:g}),t=A(),{viewCursorAdd:i,viewCursorRemove:c}=F("crosshair"),s=new M,d=R(!1);function x(){if(!u(m)){console.error("layerRef is not defined");return}i();const r=t.on("pointer-down",_);s.add(r);const n=t.on("pointer-move",k);s.add(n);const p=t.on("pointer-up",b);s.add(p);const o=t.on("drag",a=>{d.value&&a.stopPropagation()});s.add(o)}function _(r){if(d.value=!0,!t.graphics.includes(e)){const{x:n,y:p}=r,o=t.toMap({x:n,y:p}),a=new V({spatialReference:t.spatialReference,rings:[[[o.x,o.y,o.z],[o.x,o.y,o.z],[o.x,o.y,o.z]]]});e.geometry=a,t.graphics.add(e)}}function k(r){if(!d.value)return;const n=e.geometry,{x:p,y:o}=r,a=t.toMap({x:p,y:o});n.insertPoint(0,n.rings[0].length,a),e.geometry=n.clone()}function b(){y()}function y(){if(d.value=!1,c(),s.removeAll(),!t.graphics.includes(e))return;const r=new v({geometry:E(e.geometry,1e-4),symbol:f});u(m)?.add(r),t.graphics.remove(e)}return B(y),{start:x,complete:y}}const Bo=S({__name:"create",props:{layer:{type:Object,default:void 0}},setup(m){const l=m,g=U(()=>l.layer),{start:f,complete:e}=G(g,{});return(t,i)=>{const c=z("ElButton");return D(),N(T,null,[w(c,{onClick:u(f)},{default:h(()=>i[0]||(i[0]=[C(" Start ")])),_:1},8,["onClick"]),w(c,{onClick:u(e)},{default:h(()=>i[1]||(i[1]=[C(" Complete ")])),_:1},8,["onClick"])],64)}}});export{Bo as _};
