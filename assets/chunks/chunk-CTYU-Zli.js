import{ai as P,aj as A,eE as x,av as I,ep as D,dh as G,eI as h,eJ as M,eK as S,eL as b,eM as H,eN as s,eO as u,eP as z,eQ as O,eR as m,s as L,eS as V,eT as v,a1 as c,a2 as w,a4 as C,eU as $,bZ as W}from"./chunk-CGsGeN7j.js";import{m as N,j as U}from"./chunk-CiZVTIej.js";import{n as j}from"./chunk-DRtAJHF_.js";import{T as k}from"./chunk-zG9Gebow.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-D7ooZy8H.js";let d=class extends j(W){constructor(){super(...arguments),this.type="media-3d",this.drapeSourceType=P.RasterImage,this.updatePolicy=A.ASYNC,this._uidToElement=new Map,this._renderedElements=new Map,this._lastDrapingExtent=null,this._update=x(async(e,t,r)=>{const i=await this._collectMediaElements(e,t,r);this._synchronizeRenderElements(i)},0)}initialize(){this._renderer=this.view.basemapTerrain.overlayManager.registerGeometryDrapeSource(this);const e=()=>this._updateWithLastDrapingExtent();this.addHandles([I(()=>this.view.basemapTerrain.overlayManager.unregisterDrapeSource(this)),D(()=>this.layer.effectiveSource,"change",e),D(()=>this.layer.effectiveSource,"refresh",e)]),this._updatingHandles.add(()=>this.suspended,e)}setDrapingExtent(e,t){this._lastDrapingExtent={overlays:e,spatialReference:t},this._updateWithLastDrapingExtent()}getHit(e){const t=this._uidToElement.get(e);return t?{type:"media",element:t,layer:this.layer}:null}_updateWithLastDrapingExtent(){if(this._lastDrapingExtent==null||this.suspended)return void(this._renderer&&this._synchronizeRenderElements(new Set));const{overlays:e,spatialReference:t}=this._lastDrapingExtent;this._updatingHandles.addPromise(this._update(e,t).catch(()=>{}))}async _collectMediaElements(e,t,r){const i=this.layer.effectiveSource;return i==null?new Set:new Set((await Promise.all(e.map(n=>i.queryElements(G(n.extent,t),{signal:r})))).flat())}_synchronizeRenderElements(e){this._synchronizeRenderElementsRemove(e),this._synchronizeRenderElementsAdd(e)}_synchronizeRenderElementsRemove(e){const t=new Set,r=[];this._renderedElements.forEach((i,n)=>{e.has(n)||(t.add(n),i.renderData!=null&&r.push(i.renderData.renderGeometry),this._removeElement(n,i))}),this._renderer.removeGeometries(r,h.REMOVE)}_synchronizeRenderElementsAdd(e){for(const t of e)this._renderedElements.has(t)||this._createRenderElement(t)}_removeElement(e,{renderData:t,handle:r}){this._destroyRenderData(t),this._renderedElements.delete(e),this._uidToElement.delete(e.uid),r.remove()}async _createRenderElement(e){const t=new N({spatialReference:this.view.spatialReference,element:e}),r={renderData:null,handle:M([this._updatingHandles.add(()=>e.opacity,i=>{r.renderData!=null&&r.renderData.material.setParameters({opacity:i})}),this._updatingHandles.add(()=>t.coords,()=>{r.renderData!=null?this._updateGeometry(t,r,r.renderData):this._initializeRenderData(t,r)}),this._updatingHandles.add(()=>e.content,()=>this._initializeRenderData(t,r)),S(t)])};this._renderedElements.set(e,r),this._uidToElement.set(e.uid,e),this._updatingHandles.addPromise(e.load().catch(()=>{})),this._initializeRenderData(t,r)}_initializeRenderData(e,t){const{coords:r,element:i}=e,{contentWidth:n,contentHeight:l}=i;if(r==null||i.content==null)return void(t.renderData=this._destroyRenderData(t.renderData));if(t.renderData!=null)return;const a=this._createTexture(i.content),_=a.load(this.view._stage.renderView.renderingContext);this.view._stage.add(a),b(_)&&this._updatingHandles.addPromise(_);const y=new k({initTextureTransparent:!0,textureId:a.id,opacity:i.opacity,transparent:!0,perspectiveInterpolation:!0}),E=this._getPositionAttributeArray(r),f=[0,0,1,0,1,1,0,1],R=this._getPerspectiveDivideAttributeArray(E,n,l),p=[0,1,2,0,2,3],T=new H(y,[[s.POSITION,new u(E,p,3,!0)],[s.UV0,new u(f,p,2,!0)],[s.PERSPECTIVEDIVIDE,new u(R,p,1,!0)]]),g=new z(T,{layerUid:this.layer.uid,graphicUid:i.uid});this._renderer.addGeometries([g],h.ADD),t.renderData={renderGeometry:g,texture:a,material:y}}_updateGeometry(e,t,r){const{coords:i,element:n}=e;if(i==null||n.content==null)return void(t.renderData=this._destroyRenderData(t.renderData));const l=this._getPositionAttributeArray(i);r.renderGeometry.geometry.setAttributeData(s.POSITION,l);const a=this._getPerspectiveDivideAttributeArray(l,n.contentWidth,n.contentHeight);r.renderGeometry.geometry.setAttributeData(s.PERSPECTIVEDIVIDE,a),this._renderer.modifyGeometries([r.renderGeometry],O.GEOMETRY)}_getPositionAttributeArray(e){const[t,r,i,n]=e.rings[0];return[t[0],t[1],m,n[0],n[1],m,i[0],i[1],m,r[0],r[1],m]}_getPerspectiveDivideAttributeArray(e,t,r){U(o,[0,0,t,0,t,r,0,r],[e[0],e[1],e[3],e[4],e[6],e[7],e[9],e[10]]);const i=o[6]/o[8]*t,n=o[7]/o[8]*r;return[1,1+i,1+i+n,1+n]}_destroyRenderData(e){if(e==null)return null;const t=e.texture;return t.unload(),this.view._stage.remove(t),this._renderer.removeGeometries([e.renderGeometry],h.REMOVE),null}_createTexture(e){const t=e instanceof HTMLImageElement?e.naturalWidth:e.width,r=e instanceof HTMLImageElement?e.naturalHeight:e.height;if("getFrame"in e)throw new L("media-layer-view-3d","animation is not supported");return new V(e,{wrap:{s:v.CLAMP_TO_EDGE,t:v.CLAMP_TO_EDGE},preMultiplyAlpha:!0,width:t,height:r,mipmap:!0,updateCallback:()=>this.view.basemapTerrain.overlayManager.setDrawTexturesDirty()})}get test(){const e=this;return{get numberOfElements(){return e._renderedElements.size}}}};c([w({readOnly:!0})],d.prototype,"type",void 0),c([w()],d.prototype,"layer",void 0),d=c([C("esri.views.3d.layers.MediaLayerView3D")],d);const o=$(),Ge=d;export{Ge as default};
