import{bL as p,s as m,q as l}from"./chunk-CMhy9c9G.js";import{p as s,n as c}from"./chunk-CbidHm8R.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */async function g(r=null,e){if(p.geometryServiceUrl)return p.geometryServiceUrl;if(!r)throw new m("internal:geometry-service-url-not-configured");let t;t="portal"in r?r.portal||l.getDefault():r,await t.load({signal:e});const i=t.helperServices?.geometry?.url;if(!i)throw new m("internal:geometry-service-url-not-configured");return i}async function V(r,e,t=null,i){const n=await g(t,i),a=new s({geometries:[r],outSpatialReference:e}),o=await c(n,a,{signal:i});if(o&&Array.isArray(o)&&o.length===1)return o[0];throw new m("internal:geometry-service-projection-failed")}export{g as getGeometryServiceURL,V as projectGeometry};
