import{Gp as E,Gq as b,GM as D,GN as G,GO as y,GP as O,GQ as S,bq as n,Gr as _,GR as x,Gt as A,GS as w,GB as I,Gv as C,Gw as H,GT as T,Gx as N,Gy as R,GU as V,GV as F,GW as M,GX as L,GY as j,Gz as B,GZ as U,G_ as q,G$ as z,H0 as W,a1 as a,H1 as o,iH as g,H2 as Q,qv as k,H3 as X,GA as Y,oU as f,H4 as P,H5 as v,H6 as Z,H7 as J,GC as K,D1 as ee,H8 as te,H9 as se,qx as ie,Ha as re}from"./chunk-CMhy9c9G.js";import{f as ae}from"./chunk-CmN077Ld.js";import{_ as oe}from"./chunk-ByM7454y.js";function $(s){const e=new E,{vertex:t,fragment:i}=e;return b(t,s),e.include(D,s),e.include(G,s),e.include(y,s),e.include(O,s),e.include(S,s),e.attributes.add(n.POSITION,"vec3"),e.attributes.add(n.UV0,"vec2"),s.perspectiveInterpolation&&e.attributes.add(n.PERSPECTIVEDIVIDE,"float"),e.varyings.add("vpos","vec3"),s.terrainDepthTest&&e.varyings.add("depth","float"),t.main.add(_`
    vpos = position;
    ${s.terrainDepthTest?"depth = (view * vec4(vpos, 1.0)).z;":""}
    vTexCoord = uv0;
    gl_Position = transformPosition(proj, view, vpos);
    ${s.perspectiveInterpolation?"gl_Position *= perspectiveDivide;":""}`),i.uniforms.add(new x("tex",l=>l.texture),new A("opacity",l=>l.opacity)),e.varyings.add("vTexCoord","vec2"),i.include(w),i.main.add(_`
    discardBySlice(vpos);
    ${s.terrainDepthTest?"terrainDepthTest(depth);":""}
    ${s.output===I.ObjectAndLayerIdColor?`fragColor = vec4(0, 0, 0, 1);
           return;`:""}
    vec4 finalColor = texture(tex, vTexCoord) * opacity;
    outputColorHighlightOID(finalColor, vpos);`),e}const ne=Object.freeze(Object.defineProperty({__proto__:null,build:$},Symbol.toStringTag,{value:"Module"}));class le extends C{constructor(e,t,i){super(e,t,new H(ne,()=>oe(()=>Promise.resolve().then(()=>de),void 0)),i,m)}_getPipelineState(e,t){const{oitPass:i,output:l,hasOccludees:u,enableOffset:d,cullFace:c}=e,p=i===T.NONE,h=i===T.FrontFace;return N({blending:l===I.Color?p?R:V(i):null,culling:F(c),depthTest:{func:M(i)},depthWrite:L(e),drawBuffers:j(i,l),colorWrite:B,stencilWrite:u?U:null,stencilTest:u?t?q:z:null,polygonOffset:p||h?null:W(d)})}initializePipeline(e){return this._occludeePipeline=this._getPipelineState(e,!0),this._getPipelineState(e,!1)}getPipeline(e){return e?this._occludeePipeline:super.getPipeline()}}const m=new Map([[n.POSITION,0],[n.UV0,2],[n.PERSPECTIVEDIVIDE,3]]);class r extends Q{constructor(){super(...arguments),this.cullFace=g.None,this.hasSlicePlane=!1,this.enableOffset=!0,this.writeDepth=!0,this.hasOccludees=!1,this.terrainDepthTest=!1,this.cullAboveTerrain=!1,this.perspectiveInterpolation=!0,this.textureCoordinateType=k.None,this.emissionSource=X.None,this.discardInvisibleFragments=!0,this.occlusionPass=!1,this.objectAndLayerIdColorInstanced=!1}}a([o({count:g.COUNT})],r.prototype,"cullFace",void 0),a([o()],r.prototype,"hasSlicePlane",void 0),a([o()],r.prototype,"enableOffset",void 0),a([o()],r.prototype,"writeDepth",void 0),a([o()],r.prototype,"hasOccludees",void 0),a([o()],r.prototype,"terrainDepthTest",void 0),a([o()],r.prototype,"cullAboveTerrain",void 0),a([o()],r.prototype,"perspectiveInterpolation",void 0);let ge=class extends Y{constructor(e){super(e,ue),this._configuration=new r,this.vertexAttributeLocations=m,this.supportsEdges=!0,this.produces=new Map([[f.OPAQUE_MATERIAL,t=>P(t)],[f.TRANSPARENT_MATERIAL,t=>v(t)&&this.parameters.writeDepth],[f.TRANSPARENT_MATERIAL_WITHOUT_DEPTH,t=>v(t)&&!this.parameters.writeDepth],[f.DRAPED_MATERIAL,t=>v(t)||P(t)]])}getConfiguration(e,t){return this._configuration.output=e,this._configuration.cullFace=this.parameters.cullFace,this._configuration.hasSlicePlane=this.parameters.hasSlicePlane,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.hasOccludees=t.hasOccludees,this._configuration.oitPass=t.oitPass,this._configuration.enableOffset=t.camera.relativeElevation<Z,this._configuration.terrainDepthTest=t.terrainDepthTest,this._configuration.cullAboveTerrain=t.cullAboveTerrain,this._configuration.perspectiveInterpolation=this.parameters.perspectiveInterpolation,this._configuration}get visible(){return!0}createGLMaterial(e){return new pe(e)}createBufferWriter(){const e=ae.clone();return this.parameters.perspectiveInterpolation&&e.f32(n.PERSPECTIVEDIVIDE),new ce(e)}};class pe extends J{constructor(e){super({...e,...e.material.parameters})}beginSlot(e){return this.updateTexture(this._material.parameters.textureId),this._material.setParameters(this.textureBindParameters),this.acquireTechnique(le,e)}}class ce extends K{write(e,t,i,l,u,d){for(const c of this.vertexBufferLayout.fields.keys()){const p=i.get(c);if(p)if(c===n.PERSPECTIVEDIVIDE){ee(p.size===1);const h=u.getField(c,te);h&&se(p,h,d)}else ie(c,p,e,t,u,d)}}}class ue extends re{constructor(){super(...arguments),this.writeDepth=!0,this.hasSlicePlane=!1,this.cullFace=g.None,this.opacity=1,this.textureId=null,this.initTextureTransparent=!0,this.perspectiveInterpolation=!1}}const de=Object.freeze(Object.defineProperty({__proto__:null,build:$},Symbol.toStringTag,{value:"Module"}));export{ge as I};
