import{a1 as r,on as D,oo as k,op as E,ag as J,oa as G,o9 as V,fQ as X,o7 as Y,fH as Z,ob as tt,oc as et,js as st,od as ot,oe as it,of as rt,og as nt,oh as at,dr as dt,oq as pt,or as q}from"./chunk-CMhy9c9G.js";import{t as ht,a as L,i as lt}from"./chunk-CLknGTw1.js";import{h as B,g as a,m as H,I as ct,C as g,P as U,t as ut,j as P,S as ft,a as vt,b as xt,G as yt,H as mt,l as gt,v as wt,w as _t,e as Mt}from"./chunk-iAha9nPY.js";class I extends ct{}r([B(0,g)],I.prototype,"pos",void 0),r([B(1,g)],I.prototype,"uv",void 0);class $t extends wt{}class W extends U{}r([a(ut)],W.prototype,"dvs",void 0);class x extends U{}r([a(g)],x.prototype,"perspective",void 0),r([a(g)],x.prototype,"texSize",void 0),r([a(P)],x.prototype,"wrapAroundShift",void 0),r([a(P)],x.prototype,"opacity",void 0),r([a(ft)],x.prototype,"texture",void 0);class m extends vt{vertex(e){const t=e.uv.divide(this.config.texSize),s=new P(1).add(xt(t,this.config.perspective)),o=new yt(e.pos.add(new g(this.config.wrapAroundShift,0)),1),i=this.transform.dvs.multiply(o);return{uv:t,glPosition:new mt(i.xy.multiply(s),0,s)}}fragment(e){const t=gt(this.config.texture,e.uv).multiply(this.config.opacity),s=new _t;return s.glFragColor=t,s}}r([a(W)],m.prototype,"transform",void 0),r([a(x)],m.prototype,"config",void 0),r([D(0,H(I))],m.prototype,"vertex",null),r([D(0,H($t))],m.prototype,"fragment",null);let St=class extends ht{constructor(){super(...arguments),this.type=Mt.Overlay,this._mesh=null,this.shaders={overlay:new m}}render(e,t){const{context:s,painter:o}=e,i=this._getMesh(e,t);o.setPipelineState(L);const{isWrapAround:d,wrapAroundShift:c}=t.config,u={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:u},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...L,stencil:{write:!1,test:{compare:k.EQUAL,op:{fail:E.KEEP,zFail:E.KEEP,zPass:E.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,i),d&&(u.wrapAroundShift=c,o.submitDrawMeshUntyped(s,f,i))}shutdown(){J(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new lt(s,{vertex:{positions:t.position,uvs:t.tex},index:t.index!=null?{index:t.index}:void 0,groups:[{attributes:[{name:"pos",count:2,type:G.FLOAT,location:0,vertex:"positions",stride:8,offset:0},{name:"tex",count:2,type:G.UNSIGNED_SHORT,location:1,vertex:"uvs",stride:4,offset:0}],index:t.index!=null?"index":void 0,primitive:V.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}};class Et extends X{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=Y(),this._overlayTechnique=new St}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==Z.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:i,resolution:d,rotation:c,viewpoint:u,displayMat3:f}=t;if(this._viewStateId===s)return;const w=q(c),p=i*o[0],v=i*o[1];this._localOrigin=u.targetGeometry.clone();const{x:y,y:$}=this._localOrigin,_=tt(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=$;const S=d*p,b=d*v,n=et(this._dvsMat3);st(n,n,f),ot(n,n,it(p/2,v/2)),rt(n,n,nt(p/S,-v/b,1)),at(n,n,-w),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:i,worldScreenWidth:d,size:c,viewpoint:u}=s,f=this._localOrigin;let w,p=0;const v=dt(i);if(v&&i.isWrappable){const y=c[0],$=c[1],_=q(o),S=Math.abs(Math.cos(_)),b=Math.abs(Math.sin(_)),n=Math.round(y*S+$*b),[j,T]=v.valid,h=pt(i),{x:z,y:F}=u.targetGeometry,N=[z,F],O=[0,0];s.toScreen(O,N);const M=[0,0];let R;R=n>d?.5*d:.5*n;const C=Math.floor((z+.5*h)/h),K=j+C*h,Q=T+C*h,A=[O[0]+R,0];s.toMap(M,A),M[0]>Q&&(p=h),A[0]=O[0]-R,s.toMap(M,A),M[0]<K&&(p=-h),w={worldWidth:h,xBounds:[j,T]}}for(const y of t)y.updateDrawCoords(f,p,i,w)}}export{Et as u};
