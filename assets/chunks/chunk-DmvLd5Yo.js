import{b3 as I,ef as Z,av as Q,ps as E,b7 as A,pt as _,fw as d,U as f,c0 as l,hY as X,pu as ss,pv as ts,pw as es,D as os,px as rs,py as as,pz as ns,ee as is,pA as S,eh as x,eg as D,pB as ps,F as U,hZ as cs,G as ls,pC as us,pD as ms,cI as fs,hN as ds,pE as hs,pF as gs,A as ws}from"./chunk-CGsGeN7j.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */const $={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function h(e,t=o=>{},s){return new ys(e,t,s)}let ys=class{constructor(t,s=r=>{},o){if(this.onProgress=s,this.taskName=o,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof t=="number"){this._weights={};for(let r=0;r<t;r++){const a=r,n=1/t;this._weights[a]=n,this._progressMap.set(a,0)}}else this._weights=t;this.emitProgress()}emitProgress(){let t=0;for(const[s,o]of this._progressMap.entries())t+=o*this._weights[s];if(t===1&&I("enable-feature:esri-3dofl-upload-timings")){const s=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${s} sec`);for(const[o,r]of this._timingsMap){const a=Math.round(r.end-r.start)/1e3,n=Math.round(a/s*100);console.log(this.taskName??"Task",{stepKey:o,stepTime:a,relativeTime:n})}}this.onProgress(t)}setProgress(t,s){if(this._progressMap.set(t,s),I("enable-feature:esri-3dofl-upload-timings")){const o=performance.now();this._startTime??=o;const r=Z(this._timingsMap,t,()=>({start:o,end:0}));s===1&&(r.end=o)}this.emitProgress()}simulate(t,s){return k(o=>this.setProgress(t,o),s)}makeOnProgress(t){return s=>this.setProgress(t,s)}};function k(e=s=>{},t=Fs){const s=performance.now();e(0);const o=setInterval(()=>{const r=performance.now()-s,a=1-Math.exp(-r/t);e(a)},$s);return Q(()=>{clearInterval(o),e(1)})}function Ps(e,t=bs){return E(_(e*B/t))}function Ts(e,t=As){return E(_(e*B/t))}const bs=10,As=10,B=8e-6,$s=A(50),Fs=A(1e3),C=1e6,N=20*C,Ms=2e9,vs=3;async function js({data:e,name:t,description:s},o,r){let a=null;try{const n=d(o,"uploads"),i=d(n,"info"),{data:p}=await f(i,{query:{f:"json"},responseType:"json"});l(r);const c=X(o),m=p.maxUploadFileSize*C,g=c?Ms:m,b=c?Math.min(N,m):N;if(e.size>g)throw new Error("Data too large");const L=d(n,"register"),{data:F}=await f(L,{query:{f:"json",itemName:Is(t),description:s},responseType:"json",method:"post"});if(l(r),!F.success)throw new Error("Registration failed");const{itemID:G}=F.item;a=d(n,G);const H=d(a,"uploadPart"),M=Math.ceil(e.size/b),w=new Array;for(let u=0;u<M;++u)w.push(e.slice(u*b,Math.min((u+1)*b,e.size)));const y=w.slice().reverse(),v=new Array,J=h(M,r?.onProgress,"uploadItem"),W=async()=>{for(;y.length!==0;){const u=w.length-y.length,P=y.pop(),T=new FormData,V=J.simulate(u,Ps(P.size));try{T.append("f","json"),T.append("file",P),T.append("partId",`${u}`);const{data:Y}=await f(H,{timeout:0,body:T,responseType:"json",method:"post"});if(l(r),!Y.success)throw new Error("Part upload failed")}finally{V.remove()}}};for(let u=0;u<vs&&y.length!==0;++u)v.push(W());await Promise.all(v);const K=d(a,"commit"),{data:j}=await f(K,{query:{f:"json",parts:w.map((u,P)=>P).join(",")},responseType:"json",method:"post"});if(l(r),!j.success)throw new Error("Commit failed");return j.item}catch(n){if(a!=null){const i=d(a,"delete");await f(i,{query:{f:"json"},responseType:"json",method:"post"})}throw n}}function Is(e){return e.replaceAll("/","_").replaceAll("\\","_")}async function Et(e,t,s){const o=e.length;if(!o)return s?.onProgress?.(1),[];const r=h(o,s?.onProgress,"uploadAssets");return Promise.all(e.map((a,n)=>Ns(a,t,{...s,onProgress:r.makeOnProgress(n)})))}async function Ns(e,{layer:t,ongoingUploads:s},o){const r=s.get(e);if(r)return r;if(!Js(t))throw new ss;if(Es(e,t))return o?.onProgress?.(1),e;const a=_s(e,t,o);s.set(e,a);try{await a}finally{s.delete(e)}return e}function Es(e,t){const{parsedUrl:s}=t;return s!=null&&e.metadata.externalSources.some(o=>ts(o,s))}async function _s(e,t,s){const{metadata:o}=e,{displaySource:r}=o,a=O(r?.source,t),n=!!a,i=o.externalSources.length>0,p=n?Ss(a,t,s):i?xs(e,t,s):Ds(e,t,s),c=await p;return l(s),e.addExternalSources([c]),e}async function Ss(e,t,s){return{source:await q(e,t,s),original:!0}}async function xs(e,t,s){const o=z(t),{externalSources:r}=e.metadata,a=ks(r,t);if(!a)throw new es;const n=h($.uploadConvertibleSource,s?.onProgress,"uploadConvertibleSource"),i=await q(a,t,{onProgress:n.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:i,original:!0}]);const p=a.reduce((m,{asset:g})=>g instanceof File?m+g.size:m,0),c=n.simulate("serviceAssetsToGlb",Ts(p));try{return{source:await Ls(i,t,o)}}finally{c.remove()}}async function Ds(e,t,s){const o=h($.uploadLocalMesh,s?.onProgress,"uploadLocalMesh"),r=Us(e,t,{...s,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await R([r],t,{...s,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}async function Us(e,t,s){const o=z(t),r=await e.load(s),a=await r.toBinaryGLTF({ignoreLocalTransform:!0});l(s);const n=await a.buffer();return l(s),{blob:new Blob([n.data],{type:n.type}),assetName:`${os()}.glb`,assetType:o}}function ks(e,t){for(const s of e){const o=O(s.source,t);if(o)return o}return null}function O(e,t){if(!e)return null;const{infoFor3D:{supportedFormats:s,editFormats:o}}=t,r=ms(e),a=new Array;let n=!1;for(let i=0;i<r.length;++i){const p=Bs(r[i],s);if(!p)return null;o.includes(p.assetType)&&(n=!0),a.push(p)}return n?a:null}function Bs(e,t){const s=rs(e,t);return s?{asset:e,assetType:s}:null}async function q(e,t,s){return R(e.map(o=>Cs(o,s)),t,s)}async function R(e,t,s){const o=h($.uploadAssetBlobs,s?.onProgress,"uploadAssetBlobs"),r=await qs(e,t,{...s,onProgress:o.makeOnProgress("prepareAssetItems")});l(s);const a=r.map(({item:i})=>i),{uploadResults:n}=await Rs(a,t,{...s,onProgress:o.makeOnProgress("uploadAssetItems")});return l(s),e.map((i,p)=>zs(r[p],n[p],t))}async function Cs(e,t){const{asset:s,assetType:o}=e;if(s instanceof File)return{blob:s,assetName:s.name,assetType:o};const r=await s.toBlob(t);return l(t),{blob:r,assetName:s.assetName,assetType:o}}async function Os(e,t,s){const{blob:o,assetType:r,assetName:a}=e;let n=null;try{const i=await js({data:o,name:a},t.url,s);l(s),n={assetType:r,assetUploadId:i.itemID}}catch(i){fs(i),Ws().warnOnce(`Service ${t.url} does not support the REST Uploads API.`)}if(!n){const i=await ds(o);if(l(s),!i.isBase64)throw new hs;n={assetType:r,assetData:i.data}}if(!n)throw new gs;return{item:n,assetName:a}}function qs(e,t,s){const o=h(e.length,s?.onProgress,"prepareAssetItems");return Promise.all(e.map(async(r,a)=>{const n=Os(await r,t,{...s,onProgress:o.makeOnProgress(a)});return l(s),n}))}async function Rs(e,t,s){const o=k(s?.onProgress);try{const r=await f(d(t.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if(l(s),r.data.uploadResults.length!==e.length)throw new as(e.length,r.data.uploadResults.length);return r.data}finally{o.remove()}}function zs(e,t,s){const{success:o}=t;if(!o){const{error:c}=t;throw new ns(e.assetName,c)}const{assetHash:r}=t,{assetName:a,item:{assetType:n}}=e,{infoFor3D:{supportedFormats:i}}=s,p=is(n,i);if(!p)throw new S(n);return new x(a,p,[new D(`${s.parsedUrl.path}/assets/${r}`,r)])}async function Ls(e,t,s){const o=e.map(({assetName:c,parts:m})=>({assetName:c,assetHash:m[0].partHash})),r=t.capabilities?.operations.supportsAsyncConvert3D,a={f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:s,async:r},n=d(t.parsedUrl.path,"convert3D");let i;try{i=(await(r?Hs:Gs)(n,{query:a,responseType:"json",timeout:0})).data}catch{throw new ps}const{supportedFormats:p}=t.infoFor3D;return i.assets.map(c=>{const m=U(c.contentType,p);if(!m)throw new S(m);return new x(c.assetName,c.contentType,[new D(c.assetURL,c.assetHash)])})}function Gs(e,t){return f(e,t)}async function Hs(e,t){const s=(await f(e,t)).data.statusUrl;for(;;){const o=(await f(s,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return f(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await cs(Ks)}}function Js(e){return!!e.infoFor3D&&!!e.url}function z(e){const{infoFor3D:t}=e,s=U("model/gltf-binary",t.supportedFormats)??ls("glb",t.supportedFormats);if(!s)throw new us;return s}function Ws(){return ws.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const Ks=A(1e3);export{Et as uploadAssets};
