import{jP as c,cT as f,a1 as i,a2 as t,a4 as p,a7 as g,fz as u,bZ as d,ck as b,E as a,ag as h,am as m,a0 as n}from"./chunk-CGsGeN7j.js";import{t as T}from"./chunk-Deo_4pJc.js";import{$ as _}from"./chunk-CWgdhTG6.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */import"./chunk-CwAo5aSs.js";import"./chunk-BnMlEsYC.js";import"./chunk-5Gv-U3rw.js";import"./chunk-B30Qx12R.js";import"./chunk-D5zmR9t2.js";import"./chunk-sMfePc8G.js";import"./chunk-03ufMUdO.js";import"./chunk-lZkQ-ll8.js";import"./chunk-C56HSlSi.js";import"./chunk-CjZgm5AC.js";import"./chunk-CvgiXnaQ.js";import"./chunk-CfJIIhbC.js";import"./chunk-Wa8cmqdu.js";import"./chunk-D7ooZy8H.js";let r=class extends c(f){constructor(e){super(e),this.frameCenter=null,this.frameOutline=null,this.lineOfSight=null,this.sensorLocation=null,this.sensorTrail=null}};i([t({type:Boolean})],r.prototype,"frameCenter",void 0),i([t({type:Boolean})],r.prototype,"frameOutline",void 0),i([t({type:Boolean})],r.prototype,"lineOfSight",void 0),i([t({type:Boolean})],r.prototype,"sensorLocation",void 0),i([t({type:Boolean})],r.prototype,"sensorTrail",void 0),r=i([p("esri.layers.support.TelemetryDisplay")],r);const y=r,o=new g([255,127,0]);let s=class extends u(d){constructor(){super(...arguments),this._graphicsLayer=new b,this._frameOutlineGraphic=new a({symbol:{type:"simple-fill",outline:{type:"simple-line",color:o}}}),this._sensorTrailGraphic=new a({symbol:{type:"simple-line",color:o}}),this._lineOfSightGraphic=new a({symbol:{type:"simple-line",color:o}}),this._sensorLocationGraphic=new a({symbol:{type:"simple-marker",color:o}}),this._frameCenterGraphic=new a({symbol:{type:"simple-marker",color:o}}),this.layer=null,this.symbolColor=o,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=h(this._graphicsLayer)}initialize(){this.addHandles(m(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},n)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new y({frameCenter:this.layer.telemetryDisplay?.frameCenter??!0,frameOutline:this.layer.telemetryDisplay?.frameOutline??!0,lineOfSight:this.layer.telemetryDisplay?.lineOfSight??!0,sensorLocation:this.layer.telemetryDisplay?.sensorLocation??!0,sensorTrail:this.layer.telemetryDisplay?.sensorTrail??!0})}attach(){this.graphicsView=new _({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new T(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([m(()=>[this.layer.telemetryDisplay?.frameCenter,this.layer.telemetryDisplay?.frameOutline,this.layer.telemetryDisplay?.sensorLocation,this.layer.telemetryDisplay?.sensorTrail,this.layer.telemetryDisplay?.lineOfSight],()=>this._updateVisibleTelemetryElements(),n),m(()=>[this.layer.telemetry,this.visibleTelemetryElements?.frameCenter,this.visibleTelemetryElements?.frameOutline,this.visibleTelemetryElements?.sensorLocation,this.visibleTelemetryElements?.sensorTrail,this.visibleTelemetryElements?.lineOfSight],()=>this._updateGraphicGeometries(),n)])}detach(){this.container.removeAllChildren(),this.graphicsView=h(this.graphicsView)}supportsSpatialReference(e){return!0}moveStart(){}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(e){this.graphicsView.processUpdate(e)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:e}=this.layer,{visibleTelemetryElements:l}=this;e&&l&&(l.frameOutline&&e.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,l.sensorTrail&&e.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,l.lineOfSight&&e.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,l.sensorLocation&&e.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,l.frameCenter&&e.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}};i([t()],s.prototype,"graphicsView",void 0),i([t()],s.prototype,"layer",void 0),i([t()],s.prototype,"symbolColor",void 0),i([t({type:y})],s.prototype,"visibleTelemetryElements",void 0),s=i([p("esri.views.2d.layers.VideoLayerView2D")],s);const de=s;export{de as default};
