import{bA as A,d1 as Z,ar as Q,ro as S,fU as $,rp as x,d3 as h,ck as f,bI as p,i8 as X,rq as Y,rr as ee,rs as se,D as te,rt as re,ru as oe,rv as ne,rw as ae,rx as ie,er as ce,ry as E,et as I,es as _,rz as pe,rA as le,aO as ue,rB as me,ia as fe,rC as de,rD as ge,rE as he,cj as we,hZ as ye,rF as Pe,rG as be,z as Te}from"./chunk-CMhy9c9G.js";import{i as Ae,n as $e}from"./chunk-tY0H4vrP.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */const v={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function w(t,e=r=>{},s){return new ve(t,e,s)}let ve=class{constructor(e,s=o=>{},r){if(this.onProgress=s,this.taskName=r,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof e=="number"){this._weights={};for(let o=0;o<e;o++){const n=o,a=1/e;this._weights[n]=a,this._progressMap.set(n,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,r]of this._progressMap.entries())e+=r*this._weights[s];if(e===1&&A("enable-feature:esri-3dofl-upload-timings")){const s=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${s} sec`);for(const[r,o]of this._timingsMap){const n=Math.round(o.end-o.start)/1e3,a=Math.round(n/s*100);console.log(this.taskName??"Task",{stepKey:r,stepTime:n,relativeTime:a})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),A("enable-feature:esri-3dofl-upload-timings")){const r=performance.now();this._startTime??=r;const o=Z(this._timingsMap,e,()=>({start:r,end:0}));s===1&&(o.end=r)}this.emitProgress()}simulate(e,s){return k(r=>this.setProgress(e,r),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}};function k(t=s=>{},e=Se){const s=performance.now();t(0);const r=setInterval(()=>{const o=performance.now()-s,n=1-Math.exp(-o/e);t(n)},Ne);return Q(()=>{clearInterval(r),t(1)})}function Fe(t,e=je){return S(x(t*C/e))}function Me(t,e=De){return S(x(t*C/e))}const je=10,De=10,C=8e-6,Ne=$(50),Se=$(1e3),R=1e6,N=20*R,xe=2e9,Ee=3;async function Ie({data:t,name:e,description:s},r,o){let n=null;try{const a=h(r,"uploads"),i=h(a,"info"),{data:l}=await f(i,{query:{f:"json"},responseType:"json"});p(o);const d=X(r),g=l.maxUploadFileSize*R,m=d?xe:g,c=d?Math.min(N,g):N;if(t.size>m)throw new Error("Data too large");const z=h(a,"register"),{data:F}=await f(z,{query:{f:"json",itemName:_e(e),description:s},responseType:"json",method:"post"});if(p(o),!F.success)throw new Error("Registration failed");const{itemID:L}=F.item;n=h(a,L);const G=h(n,"uploadPart"),M=Math.ceil(t.size/c),y=new Array;for(let u=0;u<M;++u)y.push(t.slice(u*c,Math.min((u+1)*c,t.size)));const P=y.slice().reverse(),j=new Array,H=w(M,o?.onProgress,"uploadItem"),J=async()=>{for(;P.length!==0;){const u=y.length-P.length,b=P.pop(),T=new FormData,K=H.simulate(u,Fe(b.size));try{T.append("f","json"),T.append("file",b),T.append("partId",`${u}`);const{data:V}=await f(G,{timeout:0,body:T,responseType:"json",method:"post"});if(p(o),!V.success)throw new Error("Part upload failed")}finally{K.remove()}}};for(let u=0;u<Ee&&P.length!==0;++u)j.push(J());await Promise.all(j);const W=h(n,"commit"),{data:D}=await f(W,{query:{f:"json",parts:y.map((u,b)=>b).join(",")},responseType:"json",method:"post"});if(p(o),!D.success)throw new Error("Commit failed");return D.item}catch(a){if(n!=null){const i=h(n,"delete");await f(i,{query:{f:"json"},responseType:"json",method:"post"})}throw a}}function _e(t){return t.replaceAll("/","_").replaceAll("\\","_")}async function Us(t,e,s){const r=t.length;if(!r)return s?.onProgress?.(1),[];const o=w(r,s?.onProgress,"uploadAssets");return Promise.all(t.map((n,a)=>ke(n,e,{...s,onProgress:o.makeOnProgress(a)})))}async function ke(t,{layer:e,ongoingUploads:s},r){const o=s.get(t);if(o)return o;if(!Ye(e))throw new Y;if(Ce(t,e))return r?.onProgress?.(1),t;const n=Re(t,e,r);s.set(t,n);try{await n}finally{s.delete(t)}return t}function Ce(t,e){const{parsedUrl:s}=e;return s!=null&&t.metadata.externalSources.some(r=>ee(r,s))}async function Re(t,e,s){const{metadata:r}=t,{displaySource:o}=r,n=U(o?.source,e,{checkForConversionRequired:A("enable-feature:georeferenced-uploads")}),a=n!=null?Ue(n,e,s):r.externalSources.length>0?Oe(t,e,s):qe(t,e,s),i=await a;return p(s),t.addExternalSources([i]),t}async function Ue(t,e,s){return{source:await O(t,e,s),original:!0,unitConversionDisabled:!0}}async function Oe(t,e,s){const r=B(e),{externalSources:o}=t.metadata,n=ze(o,e);if(!n)throw new se;const a=w(v.uploadConvertibleSource,s?.onProgress,"uploadConvertibleSource"),i=await O(n,e,{onProgress:a.makeOnProgress("uploadEditSource")});t.addExternalSources([{source:i,original:!0}]);const l=n.reduce((g,{asset:m})=>m instanceof File?g+m.size:g,0),d=a.simulate("serviceAssetsToGlb",Me(l));try{const{source:g,transform:m,origin:c}=await Ve(i,e,r);return t.transform=m,c&&(t.metadata.georeferenced=!0,s?.useAssetOrigin&&(t.vertexSpace.origin=[c.x,c.y,c.z??0],t.spatialReference=c.spatialReference)),{source:g,unitConversionDisabled:!0}}finally{d.remove()}}async function qe(t,e,s){const r=w(v.uploadLocalMesh,s?.onProgress,"uploadLocalMesh"),o=Be(t,e,{...s,onProgress:r.makeOnProgress("meshToAssetBlob")});return{source:await q([o],e,{...s,onProgress:r.makeOnProgress("uploadAssetBlobs")}),extent:t.extent.clone(),original:!0}}async function Be(t,e,s){const r=B(e),o=await t.load(s),n=await o.toBinaryGLTF({origin:o.origin,signal:s?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return p(s),{blob:new Blob([n],{type:"model/gltf-binary"}),assetName:`${te()}.glb`,assetType:r}}function ze(t,e){for(const s of t){const r=U(s.source,e);if(r)return r}return null}function U(t,{infoFor3D:e},s={}){if(!t)return null;const{supportedFormats:r,editFormats:o}=e,n=he(t),a=new Array,i=re(e),l=oe(e);let d=!1;for(const g of n){const m=Le(g,r);if(!m)return null;const{assetType:c}=m;if(s.checkForConversionRequired&&(c===i||c===l))return null;o.includes(c)&&(d=!0),a.push(m)}return d?a:null}function Le(t,e){const s=ne(t,e);return s?{asset:t,assetType:s}:null}async function O(t,e,s){return q(t.map(r=>Ge(r,s)),e,s)}async function q(t,e,s){const r=w(v.uploadAssetBlobs,s?.onProgress,"uploadAssetBlobs"),o=await Je(t,e,{...s,onProgress:r.makeOnProgress("prepareAssetItems")});p(s);const n=o.map(({item:i})=>i),{uploadResults:a}=await We(n,e,{...s,onProgress:r.makeOnProgress("uploadAssetItems")});return p(s),t.map((i,l)=>Ke(o[l],a[l],e))}async function Ge(t,e){const{asset:s,assetType:r}=t;if(s instanceof File)return{blob:s,assetName:s.name,assetType:r};const o=await s.toBlob(e);return p(e),{blob:o,assetName:s.assetName,assetType:r}}async function He(t,e,s){const{blob:r,assetType:o,assetName:n}=t;let a=null;try{const i=await Ie({data:r,name:n},e.url,s);p(s),a={assetType:o,assetUploadId:i.itemID}}catch(i){we(i),es().warnOnce(`Service ${e.url} does not support the REST Uploads API.`)}if(!a){const i=await ye(r);if(p(s),!i.isBase64)throw new Pe;a={assetType:o,assetData:i.data}}if(!a)throw new be;return{item:a,assetName:n}}function Je(t,e,s){const r=w(t.length,s?.onProgress,"prepareAssetItems");return Promise.all(t.map(async(o,n)=>{const a=He(await o,e,{...s,onProgress:r.makeOnProgress(n)});return p(s),a}))}async function We(t,e,s){const r=k(s?.onProgress);try{const o=await f(h(e.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(t)},method:"post",responseType:"json"});if(p(s),o.data.uploadResults.length!==t.length)throw new ae(t.length,o.data.uploadResults.length);return o.data}finally{r.remove()}}function Ke(t,e,s){const{success:r}=e;if(!r){const{error:d}=e;throw new ie(t.assetName,d)}const{assetHash:o}=e,{assetName:n,item:{assetType:a}}=t,{infoFor3D:{supportedFormats:i}}=s,l=ce(a,i);if(!l)throw new E(a);return new I(n,l,[new _(`${s.parsedUrl.path}/assets/${o}`,o)])}async function Ve(t,e,s){const r=t.map(({assetName:n,parts:a})=>({assetName:n,assetHash:a[0].partHash}));let o;try{const n=h(e.parsedUrl.path,"convert3D"),a=e.capabilities?.operations.supportsAsyncConvert3D;o=(await(a?Xe:Qe)(n,{query:{f:"json",assets:JSON.stringify(r),transportType:"esriTransportTypeUrl",targetFormat:s,async:a},responseType:"json",timeout:0})).data}catch{throw new pe}return Ze(e,o)}function Ze(t,e){const s={source:e.assets.map(r=>{const o=le(r.contentType,t.infoFor3D.supportedFormats);if(!o)throw new E(o);return new I(r.assetName,r.contentType,[new _(r.assetURL,r.assetHash)])}),origin:void 0,transform:void 0};if(A("enable-feature:georeferenced-uploads")&&e.transform){if(s.transform=Ae(e.transform),e.spatialReference){const r=ue.fromJSON(e.spatialReference);s.origin=$e(e.transform,r)}}else s.transform=me(t.spatialReference);return s}function Qe(t,e){return f(t,e)}async function Xe(t,e){const s=(await f(t,e)).data.statusUrl;for(;;){const r=(await f(s,{query:{f:"json"},responseType:"json"})).data;switch(r.status){case"Completed":return f(r.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(r.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await fe(ss)}}function Ye(t){return!!t.infoFor3D&&!!t.url}function B({infoFor3D:t}){const e=de(t);if(!e)throw new ge;return e}function es(){return Te.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const ss=$(1e3);export{Us as uploadAssets};
