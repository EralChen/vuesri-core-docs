import{aU as P,kz as u,u9 as _,kE as f,kI as x,ip as Z,ua as H,aQ as l,ub as L,hu as R,pA as D,f$ as K,uc as k,ud as W,ue as G,uf as z,ug as A,uh as U,ui as X,uj as Y,a_ as C,uk as M,iu as B,hx as j,ul as ee,aZ as N,um as S,aP as J,un as te,uo as se,up as ie,b6 as re,kA as ne,kC as oe,kB as ae,cv as he,b4 as de,uq as pe,ur as le,us as ce,a5 as ge,V as ue,kx as fe,hH as xe,a1 as $,a2 as q,a4 as me}from"./chunk-CMhy9c9G.js";import{u as Q}from"./chunk-CpVkfY6V.js";import"./chunk-ByM7454y.js";/* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              *//* empty css              */class F{constructor(s,e){this.view=s,this.options=e,this.squaredShortLineThreshold=P.shortLineThreshold*P.shortLineThreshold}snap(s,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(s,e):this.snapNewVertex(s,e)}edgeExceedsShortLineThreshold(s,e){return this.exceedsShortLineThreshold(u(s.leftVertex.pos,this.view,e),u(s.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(s,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||_(f(e,t,x,this.view),f(s,t,x,this.view))>this.squaredShortLineThreshold}isVertical(s,e,{spatialReference:t}){const i=Z(t);return H(l(s),l(e))*i<P.verticalLineThresholdMeters}squaredProximityThreshold(s){return s==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:s,touchSensitivityMultiplier:e}=this.options,t=s*e;return t*t}}class ve extends F{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=[];if(i<1)return r;const{spatialReference:n}=e,a=f(s,n,x,this.view),{view:o}=this,h=t.edges[i-1];let d=h;do{if(this.edgeExceedsShortLineThreshold(d,e)){const g=L(d,o,e);this._processCandidateProposal(g.left,g.right,s,a,e,r)}d=d.leftVertex.leftEdge}while(d&&d!==h);return r}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2)return t;const{view:n}=this,{spatialReference:a}=e,o=f(s,a,x,n),h=i.leftEdge,d=i.rightEdge;h&&d&&this.edgeExceedsShortLineThreshold(h,e)&&this.edgeExceedsShortLineThreshold(d,e)&&this._processCandidateProposal(u(h.leftVertex.pos,n,e),u(d.rightVertex.pos,n,e),s,o,e,t);const g=r.edges[0];let c=g;do{if(c!==i.leftEdge&&c!==i.rightEdge&&this.edgeExceedsShortLineThreshold(c,e)){const m=L(c,n,e);this._processCandidateProposal(m.left,m.right,s,o,e,t)}c=c.rightVertex.rightEdge}while(c&&c!==g);return t}_processCandidateProposal(s,e,t,i,r,n){const{spatialReference:a,pointer:o}=r,h=C();Ee(h,s,e,t,r);const d=R(D(h));_(i,f(d,a,x,this.view))<this.squaredProximityThreshold(o)&&n.push(new K({lineStart:s,lineEnd:e,targetPoint:d,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}function Ee(p,s,e,t,i){we(p,s,e,t,i)||Ve(p,t,s,e)}function we(p,s,e,t,{spatialReference:i}){const r=k(s,e,i,i);if(r==null)return!1;const n=k(e,t,i,i);if(n==null)return!1;const a=Q(e,t,i);if(a==null)return!1;const o=Math.abs(W.shortestSignedDiff(r,n))>Math.PI/2?G.normalize(r+Math.PI):r;return z(p,e,i,A(a,"meters"),U(o,"radians","geographic"),"geodesic"),p[2]=t[2],!0}function Ve(p,s,e,t){X(s,{start:e,end:t,type:Y.LINE},p),p[2]=s[2]}let Pe=class extends F{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=t.vertices.length,n=[];if(i<2)return n;const{view:a}=this,o=f(s,e.spatialReference,x,a),h=u(t.vertices[r-1].pos,a,e),d=u(t.vertices[0].pos,a,e),g=t.edges[i-1];let c=g;do{if(this.edgeExceedsShortLineThreshold(c,e)){const m=L(c,a,e);this._checkEdgeForParallelLines(m,h,s,o,e,n),this._checkEdgeForParallelLines(m,d,s,o,e,n)}c=c.leftVertex.leftEdge}while(c&&c!==g);return n}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<3)return t;const{view:n}=this,a=f(s,e.spatialReference,x,n),o=i.leftEdge,h=i.rightEdge,d=r.vertices[0],g=u(d.pos,n,e),c=r.vertices.length,m=r.vertices[c-1],w=u(m.pos,n,e),y=r.edges[0];let v=y;do{if(v!==o&&v!==h&&this.edgeExceedsShortLineThreshold(v,e)){const T=L(v,n,e);o&&this._checkEdgeForParallelLines(T,u(o.leftVertex.pos,n,e),s,a,e,t),h&&this._checkEdgeForParallelLines(T,u(h.rightVertex.pos,n,e),s,a,e,t),i===d?this._checkEdgeForParallelLines(T,w,s,a,e,t):i===m&&this._checkEdgeForParallelLines(T,g,s,a,e,t)}v=v.rightVertex.rightEdge}while(v&&v!==y);return t}_checkEdgeForParallelLines(s,e,t,i,r,n){const a=s.left,o=s.right;if(M(E,l(e),l(a),l(o)),B(E,l(e))<P.parallelLineThreshold)return;M(E,l(t),l(a),l(o),l(e));const{spatialReference:h,pointer:d}=r,g=R(j(E[0],E[1],t[2]));if(_(i,f(g,h,x,this.view))<this.squaredProximityThreshold(d)){if(this.isVertical(g,e,r)||this.isVertical(a,o,r)||_e(s,n))return;n.push(new ee({referenceLine:s,lineStart:e,targetPoint:g,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}};function _e(p,s){const e=p.left,t=p.right;for(const i of s)if(M(E,l(t),l(i.constraint.start),l(i.constraint.end),l(e)),B(E,l(t))<P.parallelLineThreshold)return i.addReferenceLine(p),!0;return!1}const E=N();class ye extends F{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[];if(t.vertices.length<2)return i;const{view:r}=this,n=f(s,e.spatialReference,x,r),a=t.vertices.at(-1);this._checkForSnappingCandidate(S.LastVertex,i,a.leftEdge,a,a.leftEdge.leftVertex,s,n,e);const o=t.vertices[0];return this._checkForSnappingCandidate(S.FirstVertex,i,o.rightEdge,o,o.rightEdge.rightVertex,s,n,e),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle;if(i.component.vertices.length<3)return t;const{view:r}=this,n=f(s,e.spatialReference,x,r),a=i.leftEdge,o=i.rightEdge;if(a?.leftVertex.leftEdge){const h=a.leftVertex.leftEdge;this._checkForSnappingCandidate(S.ExistingEdge,t,h,h.rightVertex,h.leftVertex,s,n,e)}if(o?.rightVertex.rightEdge){const h=o.rightVertex.rightEdge;this._checkForSnappingCandidate(S.ExistingEdge,t,h,h.leftVertex,h.rightVertex,s,n,e)}return t}_checkForSnappingCandidate(s,e,t,i,r,n,a,o){if(!this.edgeExceedsShortLineThreshold(t,o))return;const h=this.view,d=u(i.pos,h,o),g=u(r.pos,h,o);Te(O,g,d,n,o),this._checkForSnappingCandidateAlongProjectedRay(s,e,g,d,O,n,a,o)}_checkForSnappingCandidateAlongProjectedRay(s,e,t,i,r,n,a,o){const{spatialReference:h,pointer:d}=o,g=J(I,l(n),l(i)),c=te(r,g)/se(r),m=ie(I,l(i),r,c),w=R(j(m[0],m[1],n[2]));if(_(a,f(w,h,x,this.view))>this.squaredProximityThreshold(d)||this.isVertical(w,i,o)||this.isVertical(i,t,o))return;const y=re(C(),i,r,Math.sign(c));e.push(new ne({targetPoint:w,constraint:new oe(i,D(y)),previousVertex:t,otherVertex:i,otherVertexType:ae.CENTER,selfSnappingType:s,isDraped:o.elevationInfo?.mode==="on-the-ground"}))}}function Te(p,s,e,t,i){Se(p,s,e,t,i)||$e(p,s,e)}function Se(p,s,e,t,{spatialReference:i}){const r=k(s,e,i,i);if(r==null)return!1;const n=k(e,t,i,i);if(n==null)return!1;const a=Math.sign(G.shortestSignedDiff(r,n))*Math.PI*.5,o=U(r+a,"radians","geographic"),h=C(),d=Q(e,t,i);return d!=null&&(z(h,e,i,A(d,"meters"),o,"geodesic"),he(p,h,e),!0)}function $e(p,s,e){const t=J(I,l(e),l(s));de(p,t[1],-t[0],0)}const I=N(),O=C();let Le=class extends F{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[],r=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||r<2)return i;const{view:n}=this,a=t.vertices[0],o=t.vertices[r-1],h=u(a.pos,n,e),d=u(o.pos,n,e);return this._processCandidateProposal(h,d,s,e,i),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2||e.editGeometryOperations.data.type==="polyline"&&(i.index===0||i.index===r.vertices.length-1))return t;const{view:n}=this,a=u(i.leftEdge.leftVertex.pos,n,e),o=u(i.rightEdge.rightVertex.pos,n,e);return this._processCandidateProposal(a,o,s,e,t),t}_processCandidateProposal(s,e,t,i,r){if(!this.exceedsShortLineThreshold(s,e,i))return;const n=pe(b,l(s),l(e),.5),a=.5*H(l(s),l(e)),o=le(b,l(t),n,a),h=R(j(o[0],o[1],t[2])),{spatialReference:d,pointer:g}=i,c=f(t,d,x,this.view);if(_(c,f(h,d,x,this.view))<this.squaredProximityThreshold(g)){if(this.isVertical(s,h,i)||this.isVertical(h,e,i))return;r.push(new ce({targetPoint:h,point1:s,point2:e,isDraped:i.elevationInfo?.mode==="on-the-ground"}))}}};const b=N();let V=class extends ge{constructor(p){super(p),this.updating=!1,this._snappers=new ue,this._domain=fe.SELF}initialize(){this._snappers.push(new Pe(this.view,this.options),new ve(this.view,this.options),new ye(this.view,this.options),new Le(this.view,this.options))}set options(p){this._set("options",p);for(const s of this._snappers)s.options=p}async fetchCandidates(p,s,e){if(!(s&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const i of this._snappers.items)for(const r of i.snap(p,e))t.push(r);return xe(p,t),t}};$([q({readOnly:!0})],V.prototype,"updating",void 0),$([q({constructOnly:!0})],V.prototype,"view",void 0),$([q()],V.prototype,"options",null),V=$([me("esri.views.interactive.snapping.SelfSnappingEngine")],V);export{V as SelfSnappingEngine};
